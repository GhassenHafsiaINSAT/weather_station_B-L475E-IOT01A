
Smart_Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005464  08005464  00015464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b0  080054b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054b8  080054b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054bc  080054bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080054c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  2000000c  080054cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  080054cc  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182f5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf3  00000000  00000000  00038331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  0003c5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002634c  00000000  00000000  0003da00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182d1  00000000  00000000  00063d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef818  00000000  00000000  0007c01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b835  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c34  00000000  00000000  0016b888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800544c 	.word	0x0800544c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800544c 	.word	0x0800544c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 ff75 	bl	80013be <HAL_Init>

  /* USER CODE BEGIN Init */
	// Initialize I2C and HTS221 sensor
	hts221_init();
 80004d4:	f000 fc0a 	bl	8000cec <hts221_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f832 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f9fc 	bl	80008d8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004e0:	f000 f890 	bl	8000604 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004e4:	f000 f8c6 	bl	8000674 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004e8:	f000 f904 	bl	80006f4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004ec:	f000 f928 	bl	8000740 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 f964 	bl	80007bc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004f4:	f000 f992 	bl	800081c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f8:	f000 f9c0 	bl	800087c <MX_USB_OTG_FS_PCD_Init>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Read raw humidity and temperature
		raw_humidity = hts221_read_humd_register();
 80004fc:	f000 fbdd 	bl	8000cba <hts221_read_humd_register>
 8000500:	4603      	mov	r3, r0
 8000502:	461a      	mov	r2, r3
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <main+0x60>)
 8000506:	801a      	strh	r2, [r3, #0]
		raw_temperature = hts221_read_temp_register();
 8000508:	f000 fbbe 	bl	8000c88 <hts221_read_temp_register>
 800050c:	4603      	mov	r3, r0
 800050e:	461a      	mov	r2, r3
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <main+0x64>)
 8000512:	801a      	strh	r2, [r3, #0]

		raw_data = (uint8_t)raw_temperature;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <main+0x64>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <main+0x68>)
 800051c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, "176", 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	2201      	movs	r2, #1
 8000522:	4905      	ldr	r1, [pc, #20]	; (8000538 <main+0x6c>)
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <main+0x70>)
 8000526:	f003 ffb4 	bl	8004492 <HAL_UART_Transmit>
		raw_humidity = hts221_read_humd_register();
 800052a:	e7e7      	b.n	80004fc <main+0x30>
 800052c:	20000770 	.word	0x20000770
 8000530:	20000772 	.word	0x20000772
 8000534:	20000774 	.word	0x20000774
 8000538:	08005464 	.word	0x08005464
 800053c:	2000015c 	.word	0x2000015c

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b096      	sub	sp, #88	; 0x58
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2244      	movs	r2, #68	; 0x44
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f004 ff74 	bl	800543c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000566:	f002 fab5 	bl	8002ad4 <HAL_PWREx_ControlVoltageScaling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000570:	f000 fbcc 	bl	8000d0c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000574:	f002 fa90 	bl	8002a98 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000578:	4b21      	ldr	r3, [pc, #132]	; (8000600 <SystemClock_Config+0xc0>)
 800057a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800057e:	4a20      	ldr	r2, [pc, #128]	; (8000600 <SystemClock_Config+0xc0>)
 8000580:	f023 0318 	bic.w	r3, r3, #24
 8000584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000588:	2314      	movs	r3, #20
 800058a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000598:	2360      	movs	r3, #96	; 0x60
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005a0:	2301      	movs	r3, #1
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005a8:	2328      	movs	r3, #40	; 0x28
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ac:	2307      	movs	r3, #7
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fbab 	bl	8002d18 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005c8:	f000 fba0 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2303      	movs	r3, #3
 80005d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e0:	463b      	mov	r3, r7
 80005e2:	2104      	movs	r1, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 ff73 	bl	80034d0 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005f0:	f000 fb8c 	bl	8000d0c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005f4:	f003 fc7a 	bl	8003eec <HAL_RCCEx_EnableMSIPLLMode>
}
 80005f8:	bf00      	nop
 80005fa:	3758      	adds	r7, #88	; 0x58
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000

08000604 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_DFSDM1_Init+0x68>)
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <MX_DFSDM1_Init+0x6c>)
 800060c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_DFSDM1_Init+0x68>)
 8000610:	2201      	movs	r2, #1
 8000612:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_DFSDM1_Init+0x68>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_DFSDM1_Init+0x68>)
 800061c:	2202      	movs	r2, #2
 800061e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_DFSDM1_Init+0x68>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_DFSDM1_Init+0x68>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_DFSDM1_Init+0x68>)
 800062e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000632:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <MX_DFSDM1_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_DFSDM1_Init+0x68>)
 800063c:	2204      	movs	r2, #4
 800063e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_DFSDM1_Init+0x68>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_DFSDM1_Init+0x68>)
 8000648:	2201      	movs	r2, #1
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_DFSDM1_Init+0x68>)
 800064e:	2200      	movs	r2, #0
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_DFSDM1_Init+0x68>)
 8000654:	2200      	movs	r2, #0
 8000656:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_DFSDM1_Init+0x68>)
 800065a:	f001 f85b 	bl	8001714 <HAL_DFSDM_ChannelInit>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000664:	f000 fb52 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028
 8000670:	40016020 	.word	0x40016020

08000674 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_I2C2_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <MX_I2C2_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_I2C2_Init+0x74>)
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <MX_I2C2_Init+0x7c>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_I2C2_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_I2C2_Init+0x74>)
 800068c:	2201      	movs	r2, #1
 800068e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_I2C2_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_I2C2_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2C2_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_I2C2_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_I2C2_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <MX_I2C2_Init+0x74>)
 80006b0:	f001 fb21 	bl	8001cf6 <HAL_I2C_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006ba:	f000 fb27 	bl	8000d0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <MX_I2C2_Init+0x74>)
 80006c2:	f002 f809 	bl	80026d8 <HAL_I2CEx_ConfigAnalogFilter>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006cc:	f000 fb1e 	bl	8000d0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_I2C2_Init+0x74>)
 80006d4:	f002 f84b 	bl	800276e <HAL_I2CEx_ConfigDigitalFilter>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006de:	f000 fb15 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000060 	.word	0x20000060
 80006ec:	40005800 	.word	0x40005800
 80006f0:	10909cec 	.word	0x10909cec

080006f4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_QUADSPI_Init+0x44>)
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <MX_QUADSPI_Init+0x48>)
 80006fc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_QUADSPI_Init+0x44>)
 8000700:	2202      	movs	r2, #2
 8000702:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_QUADSPI_Init+0x44>)
 8000706:	2204      	movs	r2, #4
 8000708:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_QUADSPI_Init+0x44>)
 800070c:	2210      	movs	r2, #16
 800070e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_QUADSPI_Init+0x44>)
 8000712:	2217      	movs	r2, #23
 8000714:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_QUADSPI_Init+0x44>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_QUADSPI_Init+0x44>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_QUADSPI_Init+0x44>)
 8000724:	f002 fa3c 	bl	8002ba0 <HAL_QSPI_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800072e:	f000 faed 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000b4 	.word	0x200000b4
 800073c:	a0001000 	.word	0xa0001000

08000740 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <MX_SPI3_Init+0x78>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_SPI3_Init+0x74>)
 800074c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_SPI3_Init+0x74>)
 800075a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800075e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI3_Init+0x74>)
 800076e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000772:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI3_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI3_Init+0x74>)
 800078e:	2207      	movs	r2, #7
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_SPI3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI3_Init+0x74>)
 800079a:	2208      	movs	r2, #8
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_SPI3_Init+0x74>)
 80007a0:	f003 fd86 	bl	80042b0 <HAL_SPI_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007aa:	f000 faaf 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000f8 	.word	0x200000f8
 80007b8:	40003c00 	.word	0x40003c00

080007bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	; (8000818 <MX_USART1_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART1_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART1_UART_Init+0x58>)
 8000800:	f003 fdf9 	bl	80043f6 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 fa7f 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000015c 	.word	0x2000015c
 8000818:	40013800 	.word	0x40013800

0800081c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000822:	4a15      	ldr	r2, [pc, #84]	; (8000878 <MX_USART3_UART_Init+0x5c>)
 8000824:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART3_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART3_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000860:	f003 fdc9 	bl	80043f6 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800086a:	f000 fa4f 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001e0 	.word	0x200001e0
 8000878:	40004800 	.word	0x40004800

0800087c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000886:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	2206      	movs	r2, #6
 800088c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000890:	2202      	movs	r2, #2
 8000892:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2202      	movs	r2, #2
 8000898:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	f001 ffa1 	bl	8002806 <HAL_PCD_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ca:	f000 fa1f 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000264 	.word	0x20000264

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ee:	4bbd      	ldr	r3, [pc, #756]	; (8000be4 <MX_GPIO_Init+0x30c>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4abc      	ldr	r2, [pc, #752]	; (8000be4 <MX_GPIO_Init+0x30c>)
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4bba      	ldr	r3, [pc, #744]	; (8000be4 <MX_GPIO_Init+0x30c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0310 	and.w	r3, r3, #16
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4bb7      	ldr	r3, [pc, #732]	; (8000be4 <MX_GPIO_Init+0x30c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4ab6      	ldr	r2, [pc, #728]	; (8000be4 <MX_GPIO_Init+0x30c>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4bb4      	ldr	r3, [pc, #720]	; (8000be4 <MX_GPIO_Init+0x30c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4bb1      	ldr	r3, [pc, #708]	; (8000be4 <MX_GPIO_Init+0x30c>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4ab0      	ldr	r2, [pc, #704]	; (8000be4 <MX_GPIO_Init+0x30c>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4bae      	ldr	r3, [pc, #696]	; (8000be4 <MX_GPIO_Init+0x30c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4bab      	ldr	r3, [pc, #684]	; (8000be4 <MX_GPIO_Init+0x30c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4aaa      	ldr	r2, [pc, #680]	; (8000be4 <MX_GPIO_Init+0x30c>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4ba8      	ldr	r3, [pc, #672]	; (8000be4 <MX_GPIO_Init+0x30c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	4ba5      	ldr	r3, [pc, #660]	; (8000be4 <MX_GPIO_Init+0x30c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4aa4      	ldr	r2, [pc, #656]	; (8000be4 <MX_GPIO_Init+0x30c>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4ba2      	ldr	r3, [pc, #648]	; (8000be4 <MX_GPIO_Init+0x30c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 718a 	mov.w	r1, #276	; 0x114
 800096c:	489e      	ldr	r0, [pc, #632]	; (8000be8 <MX_GPIO_Init+0x310>)
 800096e:	f001 f987 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f248 0104 	movw	r1, #32772	; 0x8004
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f001 f980 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|GPIO_PIN_14
 8000980:	2200      	movs	r2, #0
 8000982:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000986:	4899      	ldr	r0, [pc, #612]	; (8000bec <MX_GPIO_Init+0x314>)
 8000988:	f001 f97a 	bl	8001c80 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000992:	4897      	ldr	r0, [pc, #604]	; (8000bf0 <MX_GPIO_Init+0x318>)
 8000994:	f001 f974 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099e:	4894      	ldr	r0, [pc, #592]	; (8000bf0 <MX_GPIO_Init+0x318>)
 80009a0:	f001 f96e 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80009aa:	4892      	ldr	r0, [pc, #584]	; (8000bf4 <MX_GPIO_Init+0x31c>)
 80009ac:	f001 f968 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2101      	movs	r1, #1
 80009b4:	488c      	ldr	r0, [pc, #560]	; (8000be8 <MX_GPIO_Init+0x310>)
 80009b6:	f001 f963 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009ba:	f240 1315 	movw	r3, #277	; 0x115
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	4885      	ldr	r0, [pc, #532]	; (8000be8 <MX_GPIO_Init+0x310>)
 80009d4:	f000 ffaa 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009d8:	236a      	movs	r3, #106	; 0x6a
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	487e      	ldr	r0, [pc, #504]	; (8000be8 <MX_GPIO_Init+0x310>)
 80009ee:	f000 ff9d 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80009f2:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	487a      	ldr	r0, [pc, #488]	; (8000bf4 <MX_GPIO_Init+0x31c>)
 8000a0a:	f000 ff8f 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a0e:	233f      	movs	r3, #63	; 0x3f
 8000a10:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a12:	230b      	movs	r3, #11
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4874      	ldr	r0, [pc, #464]	; (8000bf4 <MX_GPIO_Init+0x31c>)
 8000a22:	f000 ff83 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a26:	2303      	movs	r3, #3
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a36:	2308      	movs	r3, #8
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a44:	f000 ff72 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D9_Pin;
 8000a48:	f248 0304 	movw	r3, #32772	; 0x8004
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f000 ff62 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f000 ff51 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a8e:	230b      	movs	r3, #11
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f000 ff44 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000aa4:	23e0      	movs	r3, #224	; 0xe0
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ab4:	2305      	movs	r3, #5
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac2:	f000 ff33 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4844      	ldr	r0, [pc, #272]	; (8000bec <MX_GPIO_Init+0x314>)
 8000adc:	f000 ff26 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae4:	230b      	movs	r3, #11
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	483e      	ldr	r0, [pc, #248]	; (8000bec <MX_GPIO_Init+0x314>)
 8000af4:	f000 ff1a 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin PB14
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|GPIO_PIN_14
 8000af8:	f24f 0314 	movw	r3, #61460	; 0xf014
 8000afc:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4836      	ldr	r0, [pc, #216]	; (8000bec <MX_GPIO_Init+0x314>)
 8000b12:	f000 ff0b 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b16:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b1a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4830      	ldr	r0, [pc, #192]	; (8000bf0 <MX_GPIO_Init+0x318>)
 8000b2e:	f000 fefd 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b32:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4829      	ldr	r0, [pc, #164]	; (8000bf0 <MX_GPIO_Init+0x318>)
 8000b4c:	f000 feee 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b50:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4822      	ldr	r0, [pc, #136]	; (8000bf4 <MX_GPIO_Init+0x31c>)
 8000b6a:	f000 fedf 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4819      	ldr	r0, [pc, #100]	; (8000bf0 <MX_GPIO_Init+0x318>)
 8000b8a:	f000 fecf 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000b8e:	2378      	movs	r3, #120	; 0x78
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <MX_GPIO_Init+0x318>)
 8000baa:	f000 febf 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000bae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb4:	2312      	movs	r3, #18
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4808      	ldr	r0, [pc, #32]	; (8000bec <MX_GPIO_Init+0x314>)
 8000bcc:	f000 feae 	bl	800192c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2017      	movs	r0, #23
 8000bd6:	f000 fd66 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bda:	2017      	movs	r0, #23
 8000bdc:	f000 fd7f 	bl	80016de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	e009      	b.n	8000bf8 <MX_GPIO_Init+0x320>
 8000be4:	40021000 	.word	0x40021000
 8000be8:	48001000 	.word	0x48001000
 8000bec:	48000400 	.word	0x48000400
 8000bf0:	48000c00 	.word	0x48000c00
 8000bf4:	48000800 	.word	0x48000800
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2028      	movs	r0, #40	; 0x28
 8000bfc:	f000 fd53 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c00:	2028      	movs	r0, #40	; 0x28
 8000c02:	f000 fd6c 	bl	80016de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop

08000c10 <hts221_read_register>:

/* USER CODE BEGIN 4 */
uint8_t hts221_read_register(uint8_t reg){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af02      	add	r7, sp, #8
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_SLAVE_ADDR << 1, &reg, 1, 100);
 8000c1e:	1dfa      	adds	r2, r7, #7
 8000c20:	2364      	movs	r3, #100	; 0x64
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2301      	movs	r3, #1
 8000c26:	21be      	movs	r1, #190	; 0xbe
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <hts221_read_register+0x3c>)
 8000c2a:	f001 f8f3 	bl	8001e14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, HTS221_SLAVE_ADDR << 1, &value, 1, 100);
 8000c2e:	f107 020f 	add.w	r2, r7, #15
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2301      	movs	r3, #1
 8000c38:	21be      	movs	r1, #190	; 0xbe
 8000c3a:	4804      	ldr	r0, [pc, #16]	; (8000c4c <hts221_read_register+0x3c>)
 8000c3c:	f001 f9de 	bl	8001ffc <HAL_I2C_Master_Receive>
	return value;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000060 	.word	0x20000060

08000c50 <hts221_write_register>:
void hts221_write_register(uint8_t reg, uint8_t value){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {reg, value};
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	733b      	strb	r3, [r7, #12]
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, HTS221_SLAVE_ADDR << 1, data, 2, 100);
 8000c68:	f107 020c 	add.w	r2, r7, #12
 8000c6c:	2364      	movs	r3, #100	; 0x64
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2302      	movs	r3, #2
 8000c72:	21be      	movs	r1, #190	; 0xbe
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <hts221_write_register+0x34>)
 8000c76:	f001 f8cd 	bl	8001e14 <HAL_I2C_Master_Transmit>
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000060 	.word	0x20000060

08000c88 <hts221_read_temp_register>:

uint16_t hts221_read_temp_register(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	uint8_t temp_high = hts221_read_register(TEMP_OUT_H_OFFSET);
 8000c8e:	202b      	movs	r0, #43	; 0x2b
 8000c90:	f7ff ffbe 	bl	8000c10 <hts221_read_register>
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_low = hts221_read_register(TEMP_OUT_L_OFFSET);
 8000c98:	202a      	movs	r0, #42	; 0x2a
 8000c9a:	f7ff ffb9 	bl	8000c10 <hts221_read_register>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71bb      	strb	r3, [r7, #6]
	return 	(((uint16_t)temp_high << 8 )| temp_low);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	021b      	lsls	r3, r3, #8
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	b29b      	uxth	r3, r3
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <hts221_read_humd_register>:

uint16_t hts221_read_humd_register(){
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
	uint8_t humd_high = hts221_read_register(HUMIDITY_OUT_H_OFFSET);
 8000cc0:	2029      	movs	r0, #41	; 0x29
 8000cc2:	f7ff ffa5 	bl	8000c10 <hts221_read_register>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t humd_low = hts221_read_register(HUMIDITY_OUT_L_OFFSET);
 8000cca:	2028      	movs	r0, #40	; 0x28
 8000ccc:	f7ff ffa0 	bl	8000c10 <hts221_read_register>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71bb      	strb	r3, [r7, #6]
	return (( (uint16_t)humd_high << 8 )| humd_low);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	021b      	lsls	r3, r3, #8
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	b21b      	sxth	r3, r3
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	b29b      	uxth	r3, r3
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <hts221_init>:

void hts221_init(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	hts221_write_register(CTRL_REG1_OFFSET, 0x85);
 8000cf0:	2185      	movs	r1, #133	; 0x85
 8000cf2:	2020      	movs	r0, #32
 8000cf4:	f7ff ffac 	bl	8000c50 <hts221_write_register>

	hts221_write_register(CTRL_REG2_OFFSET, 0x00);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2021      	movs	r0, #33	; 0x21
 8000cfc:	f7ff ffa8 	bl	8000c50 <hts221_write_register>

	hts221_write_register(CTRL_REG3_OFFSET, 0x00);
 8000d00:	2100      	movs	r1, #0
 8000d02:	2022      	movs	r0, #34	; 0x22
 8000d04:	f7ff ffa4 	bl	8000c50 <hts221_write_register>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6593      	str	r3, [r2, #88]	; 0x58
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x44>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0ac      	sub	sp, #176	; 0xb0
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2288      	movs	r2, #136	; 0x88
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f004 fb5b 	bl	800543c <memset>
  if(DFSDM1_Init == 0)
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d142      	bne.n	8000e14 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fdba 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000daa:	f7ff ffaf 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db2:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000db8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dcc:	f043 0310 	orr.w	r3, r3, #16
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dde:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000df8:	2306      	movs	r3, #6
 8000dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e02:	4619      	mov	r1, r3
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000e06:	f000 fd91 	bl	800192c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	4a02      	ldr	r2, [pc, #8]	; (8000e1c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e12:	6013      	str	r3, [r2, #0]
  }

}
 8000e14:	bf00      	nop
 8000e16:	37b0      	adds	r7, #176	; 0xb0
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000778 	.word	0x20000778
 8000e20:	40021000 	.word	0x40021000
 8000e24:	48001000 	.word	0x48001000

08000e28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0ac      	sub	sp, #176	; 0xb0
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2288      	movs	r2, #136	; 0x88
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 faf7 	bl	800543c <memset>
  if(hi2c->Instance==I2C2)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a2c      	ldr	r2, [pc, #176]	; (8000f04 <HAL_I2C_MspInit+0xdc>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d151      	bne.n	8000efc <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 fd57 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e70:	f7ff ff4c 	bl	8000d0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <HAL_I2C_MspInit+0xe0>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	4a23      	ldr	r2, [pc, #140]	; (8000f08 <HAL_I2C_MspInit+0xe0>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e80:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <HAL_I2C_MspInit+0xe0>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e94:	2312      	movs	r3, #18
 8000e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4816      	ldr	r0, [pc, #88]	; (8000f0c <HAL_I2C_MspInit+0xe4>)
 8000eb4:	f000 fd3a 	bl	800192c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INTERNAL_I2C2_SDA_Pin;
 8000eb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec0:	2312      	movs	r3, #18
 8000ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(INTERNAL_I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000edc:	4619      	mov	r1, r3
 8000ede:	480b      	ldr	r0, [pc, #44]	; (8000f0c <HAL_I2C_MspInit+0xe4>)
 8000ee0:	f000 fd24 	bl	800192c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_I2C_MspInit+0xe0>)
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_I2C_MspInit+0xe0>)
 8000eea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eee:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_I2C_MspInit+0xe0>)
 8000ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	37b0      	adds	r7, #176	; 0xb0
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40005800 	.word	0x40005800
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000400 	.word	0x48000400

08000f10 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <HAL_QSPI_MspInit+0x7c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d128      	bne.n	8000f84 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_QSPI_MspInit+0x80>)
 8000f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f36:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <HAL_QSPI_MspInit+0x80>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6513      	str	r3, [r2, #80]	; 0x50
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_QSPI_MspInit+0x80>)
 8000f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_QSPI_MspInit+0x80>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_QSPI_MspInit+0x80>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_QSPI_MspInit+0x80>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f62:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f66:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f74:	230a      	movs	r3, #10
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <HAL_QSPI_MspInit+0x84>)
 8000f80:	f000 fcd4 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	a0001000 	.word	0xa0001000
 8000f90:	40021000 	.word	0x40021000
 8000f94:	48001000 	.word	0x48001000

08000f98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a17      	ldr	r2, [pc, #92]	; (8001014 <HAL_SPI_MspInit+0x7c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d128      	bne.n	800100c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_SPI_MspInit+0x80>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	4a16      	ldr	r2, [pc, #88]	; (8001018 <HAL_SPI_MspInit+0x80>)
 8000fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_SPI_MspInit+0x80>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_SPI_MspInit+0x80>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <HAL_SPI_MspInit+0x80>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_SPI_MspInit+0x80>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000fea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_SPI_MspInit+0x84>)
 8001008:	f000 fc90 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40003c00 	.word	0x40003c00
 8001018:	40021000 	.word	0x40021000
 800101c:	48000800 	.word	0x48000800

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ae      	sub	sp, #184	; 0xb8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	2288      	movs	r2, #136	; 0x88
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f004 f9fb 	bl	800543c <memset>
  if(huart->Instance==USART1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a42      	ldr	r2, [pc, #264]	; (8001154 <HAL_UART_MspInit+0x134>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d13b      	bne.n	80010c8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001054:	2300      	movs	r3, #0
 8001056:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4618      	mov	r0, r3
 800105e:	f002 fc5b 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001068:	f7ff fe50 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800106c:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <HAL_UART_MspInit+0x138>)
 800106e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001070:	4a39      	ldr	r2, [pc, #228]	; (8001158 <HAL_UART_MspInit+0x138>)
 8001072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001076:	6613      	str	r3, [r2, #96]	; 0x60
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <HAL_UART_MspInit+0x138>)
 800107a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001084:	4b34      	ldr	r3, [pc, #208]	; (8001158 <HAL_UART_MspInit+0x138>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	4a33      	ldr	r2, [pc, #204]	; (8001158 <HAL_UART_MspInit+0x138>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001090:	4b31      	ldr	r3, [pc, #196]	; (8001158 <HAL_UART_MspInit+0x138>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800109c:	23c0      	movs	r3, #192	; 0xc0
 800109e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b4:	2307      	movs	r3, #7
 80010b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010be:	4619      	mov	r1, r3
 80010c0:	4826      	ldr	r0, [pc, #152]	; (800115c <HAL_UART_MspInit+0x13c>)
 80010c2:	f000 fc33 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010c6:	e040      	b.n	800114a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a24      	ldr	r2, [pc, #144]	; (8001160 <HAL_UART_MspInit+0x140>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d13b      	bne.n	800114a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010d2:	2304      	movs	r3, #4
 80010d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fc1a 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_UART_MspInit+0xce>
      Error_Handler();
 80010ea:	f7ff fe0f 	bl	8000d0c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_UART_MspInit+0x138>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	4a19      	ldr	r2, [pc, #100]	; (8001158 <HAL_UART_MspInit+0x138>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6593      	str	r3, [r2, #88]	; 0x58
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_UART_MspInit+0x138>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_UART_MspInit+0x138>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <HAL_UART_MspInit+0x138>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_UART_MspInit+0x138>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800111e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001138:	2307      	movs	r3, #7
 800113a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001142:	4619      	mov	r1, r3
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <HAL_UART_MspInit+0x144>)
 8001146:	f000 fbf1 	bl	800192c <HAL_GPIO_Init>
}
 800114a:	bf00      	nop
 800114c:	37b8      	adds	r7, #184	; 0xb8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40013800 	.word	0x40013800
 8001158:	40021000 	.word	0x40021000
 800115c:	48000400 	.word	0x48000400
 8001160:	40004800 	.word	0x40004800
 8001164:	48000c00 	.word	0x48000c00

08001168 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0ac      	sub	sp, #176	; 0xb0
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2288      	movs	r2, #136	; 0x88
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f004 f957 	bl	800543c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001196:	d17c      	bne.n	8001292 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800119e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80011ae:	2318      	movs	r3, #24
 80011b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011b2:	2307      	movs	r3, #7
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80011be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 fba5 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80011d4:	f7ff fd9a 	bl	8000d0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_PCD_MspInit+0x134>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	4a2f      	ldr	r2, [pc, #188]	; (800129c <HAL_PCD_MspInit+0x134>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <HAL_PCD_MspInit+0x134>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f000 fb8d 	bl	800192c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001212:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800122c:	230a      	movs	r3, #10
 800122e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f000 fb76 	bl	800192c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_PCD_MspInit+0x134>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	4a15      	ldr	r2, [pc, #84]	; (800129c <HAL_PCD_MspInit+0x134>)
 8001246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800124a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_PCD_MspInit+0x134>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_PCD_MspInit+0x134>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d114      	bne.n	800128e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_PCD_MspInit+0x134>)
 8001266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001268:	4a0c      	ldr	r2, [pc, #48]	; (800129c <HAL_PCD_MspInit+0x134>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126e:	6593      	str	r3, [r2, #88]	; 0x58
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_PCD_MspInit+0x134>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800127c:	f001 fc80 	bl	8002b80 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_PCD_MspInit+0x134>)
 8001282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001284:	4a05      	ldr	r2, [pc, #20]	; (800129c <HAL_PCD_MspInit+0x134>)
 8001286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800128a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800128c:	e001      	b.n	8001292 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800128e:	f001 fc77 	bl	8002b80 <HAL_PWREx_EnableVddUSB>
}
 8001292:	bf00      	nop
 8001294:	37b0      	adds	r7, #176	; 0xb0
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ec:	f000 f8bc 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80012f8:	2020      	movs	r0, #32
 80012fa:	f000 fcd9 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80012fe:	2040      	movs	r0, #64	; 0x40
 8001300:	f000 fcd6 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001304:	2080      	movs	r0, #128	; 0x80
 8001306:	f000 fcd3 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800130a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800130e:	f000 fccf 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}

08001316 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800131a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800131e:	f000 fcc7 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001322:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001326:	f000 fcc3 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800132a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800132e:	f000 fcbf 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001332:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001336:	f000 fcbb 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800133a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800133e:	f000 fcb7 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <SystemInit+0x20>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <SystemInit+0x20>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800136c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001370:	f7ff ffea 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001376:	490d      	ldr	r1, [pc, #52]	; (80013ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <LoopForever+0xe>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800138c:	4c0a      	ldr	r4, [pc, #40]	; (80013b8 <LoopForever+0x16>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139a:	f004 f82b 	bl	80053f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800139e:	f7ff f895 	bl	80004cc <main>

080013a2 <LoopForever>:

LoopForever:
    b LoopForever
 80013a2:	e7fe      	b.n	80013a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013b0:	080054c0 	.word	0x080054c0
  ldr r2, =_sbss
 80013b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013b8:	200007a4 	.word	0x200007a4

080013bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC1_2_IRQHandler>

080013be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 f961 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f80e 	bl	80013f0 <HAL_InitTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d002      	beq.n	80013e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	e001      	b.n	80013e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e0:	f7ff fc9a 	bl	8000d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e4:	79fb      	ldrb	r3, [r7, #7]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_InitTick+0x6c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d023      	beq.n	800144c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_InitTick+0x70>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_InitTick+0x6c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f96d 	bl	80016fa <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10f      	bne.n	8001446 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d809      	bhi.n	8001440 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 f937 	bl	80016a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_InitTick+0x74>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e007      	b.n	8001450 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e004      	b.n	8001450 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e001      	b.n	8001450 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008
 800148c:	2000077c 	.word	0x2000077c

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2000077c 	.word	0x2000077c

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff29 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff3e 	bl	8001538 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff8e 	bl	80015e4 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5d 	bl	8001590 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff31 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffa2 	bl	800164c <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0ac      	b.n	8001880 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f8b2 	bl	8001894 <DFSDM_GetChannelFromInstance>
 8001730:	4603      	mov	r3, r0
 8001732:	4a55      	ldr	r2, [pc, #340]	; (8001888 <HAL_DFSDM_ChannelInit+0x174>)
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e09f      	b.n	8001880 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fb0d 	bl	8000d60 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001746:	4b51      	ldr	r3, [pc, #324]	; (800188c <HAL_DFSDM_ChannelInit+0x178>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	4a4f      	ldr	r2, [pc, #316]	; (800188c <HAL_DFSDM_ChannelInit+0x178>)
 800174e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001750:	4b4e      	ldr	r3, [pc, #312]	; (800188c <HAL_DFSDM_ChannelInit+0x178>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d125      	bne.n	80017a4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001758:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <HAL_DFSDM_ChannelInit+0x17c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a4c      	ldr	r2, [pc, #304]	; (8001890 <HAL_DFSDM_ChannelInit+0x17c>)
 800175e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001762:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001764:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <HAL_DFSDM_ChannelInit+0x17c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4948      	ldr	r1, [pc, #288]	; (8001890 <HAL_DFSDM_ChannelInit+0x17c>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001772:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_DFSDM_ChannelInit+0x17c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a46      	ldr	r2, [pc, #280]	; (8001890 <HAL_DFSDM_ChannelInit+0x17c>)
 8001778:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800177c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	791b      	ldrb	r3, [r3, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d108      	bne.n	8001798 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001786:	4b42      	ldr	r3, [pc, #264]	; (8001890 <HAL_DFSDM_ChannelInit+0x17c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	3b01      	subs	r3, #1
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	493f      	ldr	r1, [pc, #252]	; (8001890 <HAL_DFSDM_ChannelInit+0x17c>)
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001798:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <HAL_DFSDM_ChannelInit+0x17c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a3c      	ldr	r2, [pc, #240]	; (8001890 <HAL_DFSDM_ChannelInit+0x17c>)
 800179e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017a2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80017b2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017c2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017c8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 020f 	bic.w	r2, r2, #15
 80017e0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6819      	ldr	r1, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001808:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6899      	ldr	r1, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	3b01      	subs	r3, #1
 800181a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f002 0207 	and.w	r2, r2, #7
 8001834:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001860:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f810 	bl	8001894 <DFSDM_GetChannelFromInstance>
 8001874:	4602      	mov	r2, r0
 8001876:	4904      	ldr	r1, [pc, #16]	; (8001888 <HAL_DFSDM_ChannelInit+0x174>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000784 	.word	0x20000784
 800188c:	20000780 	.word	0x20000780
 8001890:	40016000 	.word	0x40016000

08001894 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a1c      	ldr	r2, [pc, #112]	; (8001910 <DFSDM_GetChannelFromInstance+0x7c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d102      	bne.n	80018aa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e02b      	b.n	8001902 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <DFSDM_GetChannelFromInstance+0x80>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d102      	bne.n	80018b8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80018b2:	2301      	movs	r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e024      	b.n	8001902 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a17      	ldr	r2, [pc, #92]	; (8001918 <DFSDM_GetChannelFromInstance+0x84>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d102      	bne.n	80018c6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80018c0:	2302      	movs	r3, #2
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e01d      	b.n	8001902 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <DFSDM_GetChannelFromInstance+0x88>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d102      	bne.n	80018d4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80018ce:	2304      	movs	r3, #4
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	e016      	b.n	8001902 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <DFSDM_GetChannelFromInstance+0x8c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d102      	bne.n	80018e2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80018dc:	2305      	movs	r3, #5
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e00f      	b.n	8001902 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <DFSDM_GetChannelFromInstance+0x90>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d102      	bne.n	80018f0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80018ea:	2306      	movs	r3, #6
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e008      	b.n	8001902 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <DFSDM_GetChannelFromInstance+0x94>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d102      	bne.n	80018fe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80018f8:	2307      	movs	r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e001      	b.n	8001902 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80018fe:	2303      	movs	r3, #3
 8001900:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40016000 	.word	0x40016000
 8001914:	40016020 	.word	0x40016020
 8001918:	40016040 	.word	0x40016040
 800191c:	40016080 	.word	0x40016080
 8001920:	400160a0 	.word	0x400160a0
 8001924:	400160c0 	.word	0x400160c0
 8001928:	400160e0 	.word	0x400160e0

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193a:	e17f      	b.n	8001c3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8171 	beq.w	8001c36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b01      	cmp	r3, #1
 800195e:	d005      	beq.n	800196c <HAL_GPIO_Init+0x40>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d130      	bne.n	80019ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019a2:	2201      	movs	r2, #1
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	f003 0201 	and.w	r2, r3, #1
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d118      	bne.n	8001a0c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019e0:	2201      	movs	r2, #1
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	08db      	lsrs	r3, r3, #3
 80019f6:	f003 0201 	and.w	r2, r3, #1
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d017      	beq.n	8001a48 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d123      	bne.n	8001a9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	6939      	ldr	r1, [r7, #16]
 8001a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80ac 	beq.w	8001c36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	4b5f      	ldr	r3, [pc, #380]	; (8001c5c <HAL_GPIO_Init+0x330>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae2:	4a5e      	ldr	r2, [pc, #376]	; (8001c5c <HAL_GPIO_Init+0x330>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aea:	4b5c      	ldr	r3, [pc, #368]	; (8001c5c <HAL_GPIO_Init+0x330>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001af6:	4a5a      	ldr	r2, [pc, #360]	; (8001c60 <HAL_GPIO_Init+0x334>)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b20:	d025      	beq.n	8001b6e <HAL_GPIO_Init+0x242>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4f      	ldr	r2, [pc, #316]	; (8001c64 <HAL_GPIO_Init+0x338>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d01f      	beq.n	8001b6a <HAL_GPIO_Init+0x23e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4e      	ldr	r2, [pc, #312]	; (8001c68 <HAL_GPIO_Init+0x33c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d019      	beq.n	8001b66 <HAL_GPIO_Init+0x23a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4d      	ldr	r2, [pc, #308]	; (8001c6c <HAL_GPIO_Init+0x340>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_GPIO_Init+0x236>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4c      	ldr	r2, [pc, #304]	; (8001c70 <HAL_GPIO_Init+0x344>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00d      	beq.n	8001b5e <HAL_GPIO_Init+0x232>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4b      	ldr	r2, [pc, #300]	; (8001c74 <HAL_GPIO_Init+0x348>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d007      	beq.n	8001b5a <HAL_GPIO_Init+0x22e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4a      	ldr	r2, [pc, #296]	; (8001c78 <HAL_GPIO_Init+0x34c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_GPIO_Init+0x22a>
 8001b52:	2306      	movs	r3, #6
 8001b54:	e00c      	b.n	8001b70 <HAL_GPIO_Init+0x244>
 8001b56:	2307      	movs	r3, #7
 8001b58:	e00a      	b.n	8001b70 <HAL_GPIO_Init+0x244>
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	e008      	b.n	8001b70 <HAL_GPIO_Init+0x244>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x244>
 8001b62:	2303      	movs	r3, #3
 8001b64:	e004      	b.n	8001b70 <HAL_GPIO_Init+0x244>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_Init+0x244>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x244>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	f002 0203 	and.w	r2, r2, #3
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4093      	lsls	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b80:	4937      	ldr	r1, [pc, #220]	; (8001c60 <HAL_GPIO_Init+0x334>)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_GPIO_Init+0x350>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bb2:	4a32      	ldr	r2, [pc, #200]	; (8001c7c <HAL_GPIO_Init+0x350>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bb8:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_GPIO_Init+0x350>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bdc:	4a27      	ldr	r2, [pc, #156]	; (8001c7c <HAL_GPIO_Init+0x350>)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_GPIO_Init+0x350>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c06:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <HAL_GPIO_Init+0x350>)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_GPIO_Init+0x350>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c30:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <HAL_GPIO_Init+0x350>)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f47f ae78 	bne.w	800193c <HAL_GPIO_Init+0x10>
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	371c      	adds	r7, #28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010000 	.word	0x40010000
 8001c64:	48000400 	.word	0x48000400
 8001c68:	48000800 	.word	0x48000800
 8001c6c:	48000c00 	.word	0x48000c00
 8001c70:	48001000 	.word	0x48001000
 8001c74:	48001400 	.word	0x48001400
 8001c78:	48001800 	.word	0x48001800
 8001c7c:	40010400 	.word	0x40010400

08001c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c90:	787b      	ldrb	r3, [r7, #1]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f806 	bl	8001ce0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40010400 	.word	0x40010400

08001ce0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e081      	b.n	8001e0c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d106      	bne.n	8001d22 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff f883 	bl	8000e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2224      	movs	r2, #36	; 0x24
 8001d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	e006      	b.n	8001d7e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d104      	bne.n	8001d90 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69d9      	ldr	r1, [r3, #28]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1a      	ldr	r2, [r3, #32]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	460b      	mov	r3, r1
 8001e22:	817b      	strh	r3, [r7, #10]
 8001e24:	4613      	mov	r3, r2
 8001e26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	f040 80da 	bne.w	8001fea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_I2C_Master_Transmit+0x30>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e0d3      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1d8>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e4c:	f7ff fb20 	bl	8001490 <HAL_GetTick>
 8001e50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2319      	movs	r3, #25
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f9e6 	bl	8002230 <I2C_WaitOnFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0be      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2221      	movs	r2, #33	; 0x21
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2210      	movs	r2, #16
 8001e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	893a      	ldrh	r2, [r7, #8]
 8001e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2bff      	cmp	r3, #255	; 0xff
 8001e9e:	d90e      	bls.n	8001ebe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	22ff      	movs	r2, #255	; 0xff
 8001ea4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	8979      	ldrh	r1, [r7, #10]
 8001eae:	4b51      	ldr	r3, [pc, #324]	; (8001ff4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 fbdc 	bl	8002674 <I2C_TransferConfig>
 8001ebc:	e06c      	b.n	8001f98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	8979      	ldrh	r1, [r7, #10]
 8001ed0:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 fbcb 	bl	8002674 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ede:	e05b      	b.n	8001f98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	6a39      	ldr	r1, [r7, #32]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f9e3 	bl	80022b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e07b      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d034      	beq.n	8001f98 <HAL_I2C_Master_Transmit+0x184>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d130      	bne.n	8001f98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f975 	bl	8002230 <I2C_WaitOnFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e04d      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2bff      	cmp	r3, #255	; 0xff
 8001f58:	d90e      	bls.n	8001f78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	22ff      	movs	r2, #255	; 0xff
 8001f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fb7f 	bl	8002674 <I2C_TransferConfig>
 8001f76:	e00f      	b.n	8001f98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	8979      	ldrh	r1, [r7, #10]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fb6e 	bl	8002674 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d19e      	bne.n	8001ee0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	6a39      	ldr	r1, [r7, #32]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f9c2 	bl	8002330 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e01a      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001fca:	400b      	ands	r3, r1
 8001fcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
  }
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	80002000 	.word	0x80002000
 8001ff8:	fe00e800 	.word	0xfe00e800

08001ffc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	461a      	mov	r2, r3
 8002008:	460b      	mov	r3, r1
 800200a:	817b      	strh	r3, [r7, #10]
 800200c:	4613      	mov	r3, r2
 800200e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b20      	cmp	r3, #32
 800201a:	f040 80db 	bne.w	80021d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_I2C_Master_Receive+0x30>
 8002028:	2302      	movs	r3, #2
 800202a:	e0d4      	b.n	80021d6 <HAL_I2C_Master_Receive+0x1da>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002034:	f7ff fa2c 	bl	8001490 <HAL_GetTick>
 8002038:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2319      	movs	r3, #25
 8002040:	2201      	movs	r2, #1
 8002042:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f8f2 	bl	8002230 <I2C_WaitOnFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0bf      	b.n	80021d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2222      	movs	r2, #34	; 0x22
 800205a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2210      	movs	r2, #16
 8002062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	893a      	ldrh	r2, [r7, #8]
 8002076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002082:	b29b      	uxth	r3, r3
 8002084:	2bff      	cmp	r3, #255	; 0xff
 8002086:	d90e      	bls.n	80020a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	22ff      	movs	r2, #255	; 0xff
 800208c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002092:	b2da      	uxtb	r2, r3
 8002094:	8979      	ldrh	r1, [r7, #10]
 8002096:	4b52      	ldr	r3, [pc, #328]	; (80021e0 <HAL_I2C_Master_Receive+0x1e4>)
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 fae8 	bl	8002674 <I2C_TransferConfig>
 80020a4:	e06d      	b.n	8002182 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	8979      	ldrh	r1, [r7, #10]
 80020b8:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <HAL_I2C_Master_Receive+0x1e4>)
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fad7 	bl	8002674 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80020c6:	e05c      	b.n	8002182 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	6a39      	ldr	r1, [r7, #32]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f96b 	bl	80023a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e07c      	b.n	80021d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d034      	beq.n	8002182 <HAL_I2C_Master_Receive+0x186>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d130      	bne.n	8002182 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	2200      	movs	r2, #0
 8002128:	2180      	movs	r1, #128	; 0x80
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f880 	bl	8002230 <I2C_WaitOnFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e04d      	b.n	80021d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	2bff      	cmp	r3, #255	; 0xff
 8002142:	d90e      	bls.n	8002162 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	22ff      	movs	r2, #255	; 0xff
 8002148:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214e:	b2da      	uxtb	r2, r3
 8002150:	8979      	ldrh	r1, [r7, #10]
 8002152:	2300      	movs	r3, #0
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fa8a 	bl	8002674 <I2C_TransferConfig>
 8002160:	e00f      	b.n	8002182 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002170:	b2da      	uxtb	r2, r3
 8002172:	8979      	ldrh	r1, [r7, #10]
 8002174:	2300      	movs	r3, #0
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fa79 	bl	8002674 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d19d      	bne.n	80020c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	6a39      	ldr	r1, [r7, #32]
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f8cd 	bl	8002330 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e01a      	b.n	80021d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2220      	movs	r2, #32
 80021a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <HAL_I2C_Master_Receive+0x1e8>)
 80021b4:	400b      	ands	r3, r1
 80021b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e000      	b.n	80021d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80021d4:	2302      	movs	r3, #2
  }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	80002400 	.word	0x80002400
 80021e4:	fe00e800 	.word	0xfe00e800

080021e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d103      	bne.n	8002206 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2200      	movs	r2, #0
 8002204:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b01      	cmp	r3, #1
 8002212:	d007      	beq.n	8002224 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	619a      	str	r2, [r3, #24]
  }
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002240:	e022      	b.n	8002288 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d01e      	beq.n	8002288 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224a:	f7ff f921 	bl	8001490 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <I2C_WaitOnFlagUntilTimeout+0x30>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d113      	bne.n	8002288 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	f043 0220 	orr.w	r2, r3, #32
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e00f      	b.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699a      	ldr	r2, [r3, #24]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	4013      	ands	r3, r2
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d0cd      	beq.n	8002242 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022bc:	e02c      	b.n	8002318 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f8ea 	bl	800249c <I2C_IsErrorOccurred>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e02a      	b.n	8002328 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d01e      	beq.n	8002318 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022da:	f7ff f8d9 	bl	8001490 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d302      	bcc.n	80022f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d113      	bne.n	8002318 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	f043 0220 	orr.w	r2, r3, #32
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e007      	b.n	8002328 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b02      	cmp	r3, #2
 8002324:	d1cb      	bne.n	80022be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800233c:	e028      	b.n	8002390 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f8aa 	bl	800249c <I2C_IsErrorOccurred>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e026      	b.n	80023a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7ff f89d 	bl	8001490 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d113      	bne.n	8002390 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e007      	b.n	80023a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b20      	cmp	r3, #32
 800239c:	d1cf      	bne.n	800233e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023b4:	e064      	b.n	8002480 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f86e 	bl	800249c <I2C_IsErrorOccurred>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e062      	b.n	8002490 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d138      	bne.n	800244a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d105      	bne.n	80023f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e04e      	b.n	8002490 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d107      	bne.n	8002410 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2210      	movs	r2, #16
 8002406:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2204      	movs	r2, #4
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
 800240e:	e002      	b.n	8002416 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2220      	movs	r2, #32
 800241c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800242a:	400b      	ands	r3, r1
 800242c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e022      	b.n	8002490 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7ff f821 	bl	8001490 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10f      	bne.n	8002480 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002464:	f043 0220 	orr.w	r2, r3, #32
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e007      	b.n	8002490 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b04      	cmp	r3, #4
 800248c:	d193      	bne.n	80023b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	fe00e800 	.word	0xfe00e800

0800249c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d075      	beq.n	80025b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2210      	movs	r2, #16
 80024ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024d0:	e056      	b.n	8002580 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d052      	beq.n	8002580 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024da:	f7fe ffd9 	bl	8001490 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d302      	bcc.n	80024f0 <I2C_IsErrorOccurred+0x54>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d147      	bne.n	8002580 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002502:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800250e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002512:	d12e      	bne.n	8002572 <I2C_IsErrorOccurred+0xd6>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800251a:	d02a      	beq.n	8002572 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	2b20      	cmp	r3, #32
 8002520:	d027      	beq.n	8002572 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002530:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002532:	f7fe ffad 	bl	8001490 <HAL_GetTick>
 8002536:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002538:	e01b      	b.n	8002572 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800253a:	f7fe ffa9 	bl	8001490 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b19      	cmp	r3, #25
 8002546:	d914      	bls.n	8002572 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b20      	cmp	r3, #32
 800257e:	d1dc      	bne.n	800253a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b20      	cmp	r3, #32
 800258c:	d003      	beq.n	8002596 <I2C_IsErrorOccurred+0xfa>
 800258e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002592:	2b00      	cmp	r3, #0
 8002594:	d09d      	beq.n	80024d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2220      	movs	r2, #32
 80025a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00b      	beq.n	8002600 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01c      	beq.n	8002664 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f7ff fddc 	bl	80021e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <I2C_IsErrorOccurred+0x1d4>)
 800263c:	400b      	ands	r3, r1
 800263e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	431a      	orrs	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002668:	4618      	mov	r0, r3
 800266a:	3728      	adds	r7, #40	; 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	fe00e800 	.word	0xfe00e800

08002674 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	817b      	strh	r3, [r7, #10]
 8002682:	4613      	mov	r3, r2
 8002684:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800268c:	7a7b      	ldrb	r3, [r7, #9]
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002694:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	4313      	orrs	r3, r2
 800269e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	0d5b      	lsrs	r3, r3, #21
 80026ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <I2C_TransferConfig+0x60>)
 80026b4:	430b      	orrs	r3, r1
 80026b6:	43db      	mvns	r3, r3
 80026b8:	ea02 0103 	and.w	r1, r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	03ff63ff 	.word	0x03ff63ff

080026d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d138      	bne.n	8002760 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e032      	b.n	8002762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2224      	movs	r2, #36	; 0x24
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800272a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002760:	2302      	movs	r3, #2
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b20      	cmp	r3, #32
 8002782:	d139      	bne.n	80027f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800278e:	2302      	movs	r3, #2
 8002790:	e033      	b.n	80027fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2224      	movs	r2, #36	; 0x24
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0201 	bic.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
  }
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002808:	b08f      	sub	sp, #60	; 0x3c
 800280a:	af0a      	add	r7, sp, #40	; 0x28
 800280c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e116      	b.n	8002a46 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fc98 	bl	8001168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2203      	movs	r2, #3
 800283c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f002 fb43 	bl	8004ee2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	687e      	ldr	r6, [r7, #4]
 8002864:	466d      	mov	r5, sp
 8002866:	f106 0410 	add.w	r4, r6, #16
 800286a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002876:	e885 0003 	stmia.w	r5, {r0, r1}
 800287a:	1d33      	adds	r3, r6, #4
 800287c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287e:	6838      	ldr	r0, [r7, #0]
 8002880:	f002 fb03 	bl	8004e8a <USB_CoreInit>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0d7      	b.n	8002a46 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f002 fb31 	bl	8004f04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e04a      	b.n	800293e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	333d      	adds	r3, #61	; 0x3d
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	333c      	adds	r3, #60	; 0x3c
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	b298      	uxth	r0, r3
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	3344      	adds	r3, #68	; 0x44
 80028e4:	4602      	mov	r2, r0
 80028e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	3340      	adds	r3, #64	; 0x40
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	3348      	adds	r3, #72	; 0x48
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	334c      	adds	r3, #76	; 0x4c
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	3354      	adds	r3, #84	; 0x54
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	3301      	adds	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d3af      	bcc.n	80028a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	e044      	b.n	80029d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	3301      	adds	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3b5      	bcc.n	800294e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	687e      	ldr	r6, [r7, #4]
 80029ea:	466d      	mov	r5, sp
 80029ec:	f106 0410 	add.w	r4, r6, #16
 80029f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a00:	1d33      	adds	r3, r6, #4
 8002a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f002 fac9 	bl	8004f9c <USB_DevInit>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e014      	b.n	8002a46 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d102      	bne.n	8002a3a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f80a 	bl	8002a4e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 fc75 	bl	800532e <USB_DevDisconnect>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a4e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a80:	f043 0303 	orr.w	r3, r3, #3
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40007000 	.word	0x40007000

08002ab8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40007000 	.word	0x40007000

08002ad4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae2:	d130      	bne.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ae4:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af0:	d038      	beq.n	8002b64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002afa:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2232      	movs	r2, #50	; 0x32
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	4a1b      	ldr	r2, [pc, #108]	; (8002b7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0c9b      	lsrs	r3, r3, #18
 8002b14:	3301      	adds	r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b18:	e002      	b.n	8002b20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b20:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2c:	d102      	bne.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f2      	bne.n	8002b1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b40:	d110      	bne.n	8002b64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e00f      	b.n	8002b66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b52:	d007      	beq.n	8002b64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b54:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b5c:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40007000 	.word	0x40007000
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	431bde83 	.word	0x431bde83

08002b80 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8e:	6053      	str	r3, [r2, #4]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40007000 	.word	0x40007000

08002ba0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7fe fc72 	bl	8001490 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e063      	b.n	8002c80 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7fe f99f 	bl	8000f10 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002bd2:	f241 3188 	movw	r1, #5000	; 0x1388
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f858 	bl	8002c8c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	021a      	lsls	r2, r3, #8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2120      	movs	r1, #32
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f850 	bl	8002ca8 <QSPI_WaitFlagStateUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002c0c:	7afb      	ldrb	r3, [r7, #11]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d131      	bne.n	8002c76 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c1c:	f023 0310 	bic.w	r3, r3, #16
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6852      	ldr	r2, [r2, #4]
 8002c24:	0611      	lsls	r1, r2, #24
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68d2      	ldr	r2, [r2, #12]
 8002c2a:	4311      	orrs	r1, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <HAL_QSPI_Init+0xe8>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6912      	ldr	r2, [r2, #16]
 8002c42:	0411      	lsls	r1, r2, #16
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6952      	ldr	r2, [r2, #20]
 8002c48:	4311      	orrs	r1, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6992      	ldr	r2, [r2, #24]
 8002c4e:	4311      	orrs	r1, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	ffe0f8fe 	.word	0xffe0f8fe

08002c8c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002cb8:	e01a      	b.n	8002cf0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d016      	beq.n	8002cf0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7fe fbe5 	bl	8001490 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10b      	bne.n	8002cf0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e00e      	b.n	8002d0e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1d6      	bne.n	8002cba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e3ca      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2a:	4b97      	ldr	r3, [pc, #604]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d34:	4b94      	ldr	r3, [pc, #592]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80e4 	beq.w	8002f14 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <HAL_RCC_OscConfig+0x4a>
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	f040 808b 	bne.w	8002e70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	f040 8087 	bne.w	8002e70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d62:	4b89      	ldr	r3, [pc, #548]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_RCC_OscConfig+0x62>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e3a2      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1a      	ldr	r2, [r3, #32]
 8002d7e:	4b82      	ldr	r3, [pc, #520]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_RCC_OscConfig+0x7c>
 8002d8a:	4b7f      	ldr	r3, [pc, #508]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d92:	e005      	b.n	8002da0 <HAL_RCC_OscConfig+0x88>
 8002d94:	4b7c      	ldr	r3, [pc, #496]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d223      	bcs.n	8002dec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fd55 	bl	8003858 <RCC_SetFlashLatencyFromMSIRange>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e383      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db8:	4b73      	ldr	r3, [pc, #460]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a72      	ldr	r2, [pc, #456]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002dbe:	f043 0308 	orr.w	r3, r3, #8
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b70      	ldr	r3, [pc, #448]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	496d      	ldr	r1, [pc, #436]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd6:	4b6c      	ldr	r3, [pc, #432]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	4968      	ldr	r1, [pc, #416]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
 8002dea:	e025      	b.n	8002e38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dec:	4b66      	ldr	r3, [pc, #408]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a65      	ldr	r2, [pc, #404]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002df2:	f043 0308 	orr.w	r3, r3, #8
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4960      	ldr	r1, [pc, #384]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e0a:	4b5f      	ldr	r3, [pc, #380]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	495b      	ldr	r1, [pc, #364]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fd15 	bl	8003858 <RCC_SetFlashLatencyFromMSIRange>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e343      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e38:	f000 fc4a 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b52      	ldr	r3, [pc, #328]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	4950      	ldr	r1, [pc, #320]	; (8002f8c <HAL_RCC_OscConfig+0x274>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
 8002e54:	4a4e      	ldr	r2, [pc, #312]	; (8002f90 <HAL_RCC_OscConfig+0x278>)
 8002e56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e58:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <HAL_RCC_OscConfig+0x27c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe fac7 	bl	80013f0 <HAL_InitTick>
 8002e62:	4603      	mov	r3, r0
 8002e64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d052      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	e327      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d032      	beq.n	8002ede <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e78:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a42      	ldr	r2, [pc, #264]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e84:	f7fe fb04 	bl	8001490 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fb00 	bl	8001490 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e310      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e9e:	4b3a      	ldr	r3, [pc, #232]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a36      	ldr	r2, [pc, #216]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4931      	ldr	r1, [pc, #196]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	021b      	lsls	r3, r3, #8
 8002ed6:	492c      	ldr	r1, [pc, #176]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
 8002edc:	e01a      	b.n	8002f14 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ede:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eea:	f7fe fad1 	bl	8001490 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef2:	f7fe facd 	bl	8001490 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e2dd      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f04:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f0      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x1da>
 8002f10:	e000      	b.n	8002f14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d074      	beq.n	800300a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d005      	beq.n	8002f32 <HAL_RCC_OscConfig+0x21a>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	d10e      	bne.n	8002f4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d10b      	bne.n	8002f4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d064      	beq.n	8003008 <HAL_RCC_OscConfig+0x2f0>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d160      	bne.n	8003008 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e2ba      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x24a>
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	e026      	b.n	8002fb0 <HAL_RCC_OscConfig+0x298>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6a:	d115      	bne.n	8002f98 <HAL_RCC_OscConfig+0x280>
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002f72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a02      	ldr	r2, [pc, #8]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	e014      	b.n	8002fb0 <HAL_RCC_OscConfig+0x298>
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	08005468 	.word	0x08005468
 8002f90:	20000000 	.word	0x20000000
 8002f94:	20000004 	.word	0x20000004
 8002f98:	4ba0      	ldr	r3, [pc, #640]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a9f      	ldr	r2, [pc, #636]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8002f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b9d      	ldr	r3, [pc, #628]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a9c      	ldr	r2, [pc, #624]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8002faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d013      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fa6a 	bl	8001490 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc0:	f7fe fa66 	bl	8001490 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	; 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e276      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd2:	4b92      	ldr	r3, [pc, #584]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x2a8>
 8002fde:	e014      	b.n	800300a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fa56 	bl	8001490 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fa52 	bl	8001490 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e262      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ffa:	4b88      	ldr	r3, [pc, #544]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x2d0>
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d060      	beq.n	80030d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d005      	beq.n	8003028 <HAL_RCC_OscConfig+0x310>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d119      	bne.n	8003056 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d116      	bne.n	8003056 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003028:	4b7c      	ldr	r3, [pc, #496]	; (800321c <HAL_RCC_OscConfig+0x504>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_OscConfig+0x328>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e23f      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003040:	4b76      	ldr	r3, [pc, #472]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	061b      	lsls	r3, r3, #24
 800304e:	4973      	ldr	r1, [pc, #460]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003054:	e040      	b.n	80030d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d023      	beq.n	80030a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800305e:	4b6f      	ldr	r3, [pc, #444]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a6e      	ldr	r2, [pc, #440]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fe fa11 	bl	8001490 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003072:	f7fe fa0d 	bl	8001490 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e21d      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003084:	4b65      	ldr	r3, [pc, #404]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003090:	4b62      	ldr	r3, [pc, #392]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	495f      	ldr	r1, [pc, #380]	; (800321c <HAL_RCC_OscConfig+0x504>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
 80030a4:	e018      	b.n	80030d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a6:	4b5d      	ldr	r3, [pc, #372]	; (800321c <HAL_RCC_OscConfig+0x504>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a5c      	ldr	r2, [pc, #368]	; (800321c <HAL_RCC_OscConfig+0x504>)
 80030ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe f9ed 	bl	8001490 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ba:	f7fe f9e9 	bl	8001490 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e1f9      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030cc:	4b53      	ldr	r3, [pc, #332]	; (800321c <HAL_RCC_OscConfig+0x504>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d03c      	beq.n	800315e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01c      	beq.n	8003126 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ec:	4b4b      	ldr	r3, [pc, #300]	; (800321c <HAL_RCC_OscConfig+0x504>)
 80030ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f2:	4a4a      	ldr	r2, [pc, #296]	; (800321c <HAL_RCC_OscConfig+0x504>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe f9c8 	bl	8001490 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003104:	f7fe f9c4 	bl	8001490 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e1d4      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003116:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ef      	beq.n	8003104 <HAL_RCC_OscConfig+0x3ec>
 8003124:	e01b      	b.n	800315e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003126:	4b3d      	ldr	r3, [pc, #244]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800312c:	4a3b      	ldr	r2, [pc, #236]	; (800321c <HAL_RCC_OscConfig+0x504>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7fe f9ab 	bl	8001490 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313e:	f7fe f9a7 	bl	8001490 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e1b7      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003150:	4b32      	ldr	r3, [pc, #200]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1ef      	bne.n	800313e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80a6 	beq.w	80032b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316c:	2300      	movs	r3, #0
 800316e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003170:	4b2a      	ldr	r3, [pc, #168]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10d      	bne.n	8003198 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317c:	4b27      	ldr	r3, [pc, #156]	; (800321c <HAL_RCC_OscConfig+0x504>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	4a26      	ldr	r2, [pc, #152]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003186:	6593      	str	r3, [r2, #88]	; 0x58
 8003188:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCC_OscConfig+0x504>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003194:	2301      	movs	r3, #1
 8003196:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_RCC_OscConfig+0x508>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d118      	bne.n	80031d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a4:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <HAL_RCC_OscConfig+0x508>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1d      	ldr	r2, [pc, #116]	; (8003220 <HAL_RCC_OscConfig+0x508>)
 80031aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b0:	f7fe f96e 	bl	8001490 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b8:	f7fe f96a 	bl	8001490 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e17a      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <HAL_RCC_OscConfig+0x508>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d108      	bne.n	80031f0 <HAL_RCC_OscConfig+0x4d8>
 80031de:	4b0f      	ldr	r3, [pc, #60]	; (800321c <HAL_RCC_OscConfig+0x504>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	4a0d      	ldr	r2, [pc, #52]	; (800321c <HAL_RCC_OscConfig+0x504>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ee:	e029      	b.n	8003244 <HAL_RCC_OscConfig+0x52c>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d115      	bne.n	8003224 <HAL_RCC_OscConfig+0x50c>
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <HAL_RCC_OscConfig+0x504>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	4a07      	ldr	r2, [pc, #28]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003200:	f043 0304 	orr.w	r3, r3, #4
 8003204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <HAL_RCC_OscConfig+0x504>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	4a03      	ldr	r2, [pc, #12]	; (800321c <HAL_RCC_OscConfig+0x504>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003218:	e014      	b.n	8003244 <HAL_RCC_OscConfig+0x52c>
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
 8003220:	40007000 	.word	0x40007000
 8003224:	4b9c      	ldr	r3, [pc, #624]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	4a9b      	ldr	r2, [pc, #620]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003234:	4b98      	ldr	r3, [pc, #608]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	4a97      	ldr	r2, [pc, #604]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d016      	beq.n	800327a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324c:	f7fe f920 	bl	8001490 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003252:	e00a      	b.n	800326a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003254:	f7fe f91c 	bl	8001490 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e12a      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326a:	4b8b      	ldr	r3, [pc, #556]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0ed      	beq.n	8003254 <HAL_RCC_OscConfig+0x53c>
 8003278:	e015      	b.n	80032a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7fe f909 	bl	8001490 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fe f905 	bl	8001490 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e113      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003298:	4b7f      	ldr	r3, [pc, #508]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1ed      	bne.n	8003282 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032a6:	7ffb      	ldrb	r3, [r7, #31]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ac:	4b7a      	ldr	r3, [pc, #488]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 80032ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b0:	4a79      	ldr	r2, [pc, #484]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 80032b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80fe 	beq.w	80034be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	f040 80d0 	bne.w	800346c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032cc:	4b72      	ldr	r3, [pc, #456]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0203 	and.w	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	429a      	cmp	r2, r3
 80032de:	d130      	bne.n	8003342 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	3b01      	subs	r3, #1
 80032ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d127      	bne.n	8003342 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d11f      	bne.n	8003342 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800330c:	2a07      	cmp	r2, #7
 800330e:	bf14      	ite	ne
 8003310:	2201      	movne	r2, #1
 8003312:	2200      	moveq	r2, #0
 8003314:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003316:	4293      	cmp	r3, r2
 8003318:	d113      	bne.n	8003342 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003324:	085b      	lsrs	r3, r3, #1
 8003326:	3b01      	subs	r3, #1
 8003328:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d109      	bne.n	8003342 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	085b      	lsrs	r3, r3, #1
 800333a:	3b01      	subs	r3, #1
 800333c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d06e      	beq.n	8003420 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b0c      	cmp	r3, #12
 8003346:	d069      	beq.n	800341c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003348:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003354:	4b50      	ldr	r3, [pc, #320]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0ad      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003364:	4b4c      	ldr	r3, [pc, #304]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a4b      	ldr	r2, [pc, #300]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 800336a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003370:	f7fe f88e 	bl	8001490 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003378:	f7fe f88a 	bl	8001490 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e09a      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338a:	4b43      	ldr	r3, [pc, #268]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003396:	4b40      	ldr	r3, [pc, #256]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	4b40      	ldr	r3, [pc, #256]	; (800349c <HAL_RCC_OscConfig+0x784>)
 800339c:	4013      	ands	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033a6:	3a01      	subs	r2, #1
 80033a8:	0112      	lsls	r2, r2, #4
 80033aa:	4311      	orrs	r1, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033b0:	0212      	lsls	r2, r2, #8
 80033b2:	4311      	orrs	r1, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033b8:	0852      	lsrs	r2, r2, #1
 80033ba:	3a01      	subs	r2, #1
 80033bc:	0552      	lsls	r2, r2, #21
 80033be:	4311      	orrs	r1, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033c4:	0852      	lsrs	r2, r2, #1
 80033c6:	3a01      	subs	r2, #1
 80033c8:	0652      	lsls	r2, r2, #25
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033d0:	0912      	lsrs	r2, r2, #4
 80033d2:	0452      	lsls	r2, r2, #17
 80033d4:	430a      	orrs	r2, r1
 80033d6:	4930      	ldr	r1, [pc, #192]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033dc:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2d      	ldr	r2, [pc, #180]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 80033e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 80033ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033f4:	f7fe f84c 	bl	8001490 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe f848 	bl	8001490 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e058      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340e:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800341a:	e050      	b.n	80034be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e04f      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d148      	bne.n	80034be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a19      	ldr	r2, [pc, #100]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003436:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003438:	4b17      	ldr	r3, [pc, #92]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4a16      	ldr	r2, [pc, #88]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 800343e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003442:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003444:	f7fe f824 	bl	8001490 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe f820 	bl	8001490 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e030      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x734>
 800346a:	e028      	b.n	80034be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d023      	beq.n	80034ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a08      	ldr	r2, [pc, #32]	; (8003498 <HAL_RCC_OscConfig+0x780>)
 8003478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe f807 	bl	8001490 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003484:	e00c      	b.n	80034a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003486:	f7fe f803 	bl	8001490 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d905      	bls.n	80034a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e013      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
 8003498:	40021000 	.word	0x40021000
 800349c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_RCC_OscConfig+0x7b0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ec      	bne.n	8003486 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_RCC_OscConfig+0x7b0>)
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	4905      	ldr	r1, [pc, #20]	; (80034c8 <HAL_RCC_OscConfig+0x7b0>)
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_RCC_OscConfig+0x7b4>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	60cb      	str	r3, [r1, #12]
 80034b8:	e001      	b.n	80034be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	feeefffc 	.word	0xfeeefffc

080034d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0e7      	b.n	80036b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b75      	ldr	r3, [pc, #468]	; (80036bc <HAL_RCC_ClockConfig+0x1ec>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d910      	bls.n	8003514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b72      	ldr	r3, [pc, #456]	; (80036bc <HAL_RCC_ClockConfig+0x1ec>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 0207 	bic.w	r2, r3, #7
 80034fa:	4970      	ldr	r1, [pc, #448]	; (80036bc <HAL_RCC_ClockConfig+0x1ec>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b6e      	ldr	r3, [pc, #440]	; (80036bc <HAL_RCC_ClockConfig+0x1ec>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0cf      	b.n	80036b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d010      	beq.n	8003542 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	4b66      	ldr	r3, [pc, #408]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800352c:	429a      	cmp	r2, r3
 800352e:	d908      	bls.n	8003542 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4960      	ldr	r1, [pc, #384]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d04c      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b03      	cmp	r3, #3
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003556:	4b5a      	ldr	r3, [pc, #360]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d121      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0a6      	b.n	80036b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356e:	4b54      	ldr	r3, [pc, #336]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d115      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e09a      	b.n	80036b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003586:	4b4e      	ldr	r3, [pc, #312]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e08e      	b.n	80036b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003596:	4b4a      	ldr	r3, [pc, #296]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e086      	b.n	80036b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035a6:	4b46      	ldr	r3, [pc, #280]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f023 0203 	bic.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4943      	ldr	r1, [pc, #268]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b8:	f7fd ff6a 	bl	8001490 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c0:	f7fd ff66 	bl	8001490 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e06e      	b.n	80036b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 020c 	and.w	r2, r3, #12
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d1eb      	bne.n	80035c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d010      	beq.n	8003616 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	4b31      	ldr	r3, [pc, #196]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003600:	429a      	cmp	r2, r3
 8003602:	d208      	bcs.n	8003616 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	492b      	ldr	r1, [pc, #172]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003616:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_RCC_ClockConfig+0x1ec>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d210      	bcs.n	8003646 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003624:	4b25      	ldr	r3, [pc, #148]	; (80036bc <HAL_RCC_ClockConfig+0x1ec>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f023 0207 	bic.w	r2, r3, #7
 800362c:	4923      	ldr	r1, [pc, #140]	; (80036bc <HAL_RCC_ClockConfig+0x1ec>)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	4313      	orrs	r3, r2
 8003632:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003634:	4b21      	ldr	r3, [pc, #132]	; (80036bc <HAL_RCC_ClockConfig+0x1ec>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d001      	beq.n	8003646 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e036      	b.n	80036b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	4918      	ldr	r1, [pc, #96]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d009      	beq.n	8003684 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003670:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4910      	ldr	r1, [pc, #64]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003680:	4313      	orrs	r3, r2
 8003682:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003684:	f000 f824 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <HAL_RCC_ClockConfig+0x1f0>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	490b      	ldr	r1, [pc, #44]	; (80036c4 <HAL_RCC_ClockConfig+0x1f4>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
 80036a0:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <HAL_RCC_ClockConfig+0x1f8>)
 80036a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1fc>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fd fea1 	bl	80013f0 <HAL_InitTick>
 80036ae:	4603      	mov	r3, r0
 80036b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80036b2:	7afb      	ldrb	r3, [r7, #11]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40022000 	.word	0x40022000
 80036c0:	40021000 	.word	0x40021000
 80036c4:	08005468 	.word	0x08005468
 80036c8:	20000000 	.word	0x20000000
 80036cc:	20000004 	.word	0x20000004

080036d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036de:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036e8:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x34>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d121      	bne.n	8003742 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d11e      	bne.n	8003742 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003704:	4b34      	ldr	r3, [pc, #208]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003710:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e005      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003720:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800372c:	4a2b      	ldr	r2, [pc, #172]	; (80037dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003734:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10d      	bne.n	8003758 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003740:	e00a      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d102      	bne.n	800374e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003748:	4b25      	ldr	r3, [pc, #148]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	e004      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d101      	bne.n	8003758 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003754:	4b23      	ldr	r3, [pc, #140]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003756:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2b0c      	cmp	r3, #12
 800375c:	d134      	bne.n	80037c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800375e:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d003      	beq.n	8003776 <HAL_RCC_GetSysClockFreq+0xa6>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d003      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0xac>
 8003774:	e005      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003776:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003778:	617b      	str	r3, [r7, #20]
      break;
 800377a:	e005      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800377e:	617b      	str	r3, [r7, #20]
      break;
 8003780:	e002      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	617b      	str	r3, [r7, #20]
      break;
 8003786:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003788:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	3301      	adds	r3, #1
 8003794:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	0a1b      	lsrs	r3, r3, #8
 800379c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	fb03 f202 	mul.w	r2, r3, r2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	0e5b      	lsrs	r3, r3, #25
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	3301      	adds	r3, #1
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037c8:	69bb      	ldr	r3, [r7, #24]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3724      	adds	r7, #36	; 0x24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000
 80037dc:	08005480 	.word	0x08005480
 80037e0:	00f42400 	.word	0x00f42400
 80037e4:	007a1200 	.word	0x007a1200

080037e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000000 	.word	0x20000000

08003800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003804:	f7ff fff0 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCC_GetPCLK1Freq+0x24>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	4904      	ldr	r1, [pc, #16]	; (8003828 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000
 8003828:	08005478 	.word	0x08005478

0800382c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003830:	f7ff ffda 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	0adb      	lsrs	r3, r3, #11
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	4904      	ldr	r1, [pc, #16]	; (8003854 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800384c:	4618      	mov	r0, r3
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000
 8003854:	08005478 	.word	0x08005478

08003858 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003860:	2300      	movs	r3, #0
 8003862:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003864:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003870:	f7ff f922 	bl	8002ab8 <HAL_PWREx_GetVoltageRange>
 8003874:	6178      	str	r0, [r7, #20]
 8003876:	e014      	b.n	80038a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003878:	4b25      	ldr	r3, [pc, #148]	; (8003910 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	4a24      	ldr	r2, [pc, #144]	; (8003910 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003882:	6593      	str	r3, [r2, #88]	; 0x58
 8003884:	4b22      	ldr	r3, [pc, #136]	; (8003910 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003890:	f7ff f912 	bl	8002ab8 <HAL_PWREx_GetVoltageRange>
 8003894:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003896:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a8:	d10b      	bne.n	80038c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b80      	cmp	r3, #128	; 0x80
 80038ae:	d919      	bls.n	80038e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2ba0      	cmp	r3, #160	; 0xa0
 80038b4:	d902      	bls.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038b6:	2302      	movs	r3, #2
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	e013      	b.n	80038e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038bc:	2301      	movs	r3, #1
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	e010      	b.n	80038e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d902      	bls.n	80038ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038c8:	2303      	movs	r3, #3
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	e00a      	b.n	80038e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b80      	cmp	r3, #128	; 0x80
 80038d2:	d102      	bne.n	80038da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038d4:	2302      	movs	r3, #2
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	e004      	b.n	80038e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b70      	cmp	r3, #112	; 0x70
 80038de:	d101      	bne.n	80038e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038e0:	2301      	movs	r3, #1
 80038e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f023 0207 	bic.w	r2, r3, #7
 80038ec:	4909      	ldr	r1, [pc, #36]	; (8003914 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038f4:	4b07      	ldr	r3, [pc, #28]	; (8003914 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d001      	beq.n	8003906 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	40022000 	.word	0x40022000

08003918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003920:	2300      	movs	r3, #0
 8003922:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003924:	2300      	movs	r3, #0
 8003926:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003930:	2b00      	cmp	r3, #0
 8003932:	d041      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003938:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800393c:	d02a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800393e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003942:	d824      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003944:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003948:	d008      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800394a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800394e:	d81e      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003958:	d010      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800395a:	e018      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800395c:	4b86      	ldr	r3, [pc, #536]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4a85      	ldr	r2, [pc, #532]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003966:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003968:	e015      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	2100      	movs	r1, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f000 facb 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800397a:	e00c      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3320      	adds	r3, #32
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fbb6 	bl	80040f4 <RCCEx_PLLSAI2_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800398c:	e003      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	74fb      	strb	r3, [r7, #19]
      break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003996:	7cfb      	ldrb	r3, [r7, #19]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800399c:	4b76      	ldr	r3, [pc, #472]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039aa:	4973      	ldr	r1, [pc, #460]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039b2:	e001      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d041      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039cc:	d02a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80039ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039d2:	d824      	bhi.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d8:	d008      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039de:	d81e      	bhi.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e8:	d010      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039ea:	e018      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039ec:	4b62      	ldr	r3, [pc, #392]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4a61      	ldr	r2, [pc, #388]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039f8:	e015      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fa83 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a0a:	e00c      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3320      	adds	r3, #32
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fb6e 	bl	80040f4 <RCCEx_PLLSAI2_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a1c:	e003      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	74fb      	strb	r3, [r7, #19]
      break;
 8003a22:	e000      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a26:	7cfb      	ldrb	r3, [r7, #19]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10b      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a2c:	4b52      	ldr	r3, [pc, #328]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a3a:	494f      	ldr	r1, [pc, #316]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a42:	e001      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80a0 	beq.w	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a5a:	4b47      	ldr	r3, [pc, #284]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00d      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a70:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a74:	4a40      	ldr	r2, [pc, #256]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a7c:	4b3e      	ldr	r3, [pc, #248]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a8c:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a3a      	ldr	r2, [pc, #232]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a98:	f7fd fcfa 	bl	8001490 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a9e:	e009      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa0:	f7fd fcf6 	bl	8001490 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d902      	bls.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ab2:	e005      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ab4:	4b31      	ldr	r3, [pc, #196]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0ef      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d15c      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ac6:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01f      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d019      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ae4:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003af0:	4b21      	ldr	r3, [pc, #132]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	4a20      	ldr	r2, [pc, #128]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d016      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b22:	f7fd fcb5 	bl	8001490 <HAL_GetTick>
 8003b26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b28:	e00b      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2a:	f7fd fcb1 	bl	8001490 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d902      	bls.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	74fb      	strb	r3, [r7, #19]
            break;
 8003b40:	e006      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ec      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b50:	7cfb      	ldrb	r3, [r7, #19]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b66:	4904      	ldr	r1, [pc, #16]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b6e:	e009      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b70:	7cfb      	ldrb	r3, [r7, #19]
 8003b72:	74bb      	strb	r3, [r7, #18]
 8003b74:	e006      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b84:	7c7b      	ldrb	r3, [r7, #17]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d105      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8a:	4b9e      	ldr	r3, [pc, #632]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	4a9d      	ldr	r2, [pc, #628]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ba2:	4b98      	ldr	r3, [pc, #608]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f023 0203 	bic.w	r2, r3, #3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	4994      	ldr	r1, [pc, #592]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bc4:	4b8f      	ldr	r3, [pc, #572]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	f023 020c 	bic.w	r2, r3, #12
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	498c      	ldr	r1, [pc, #560]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003be6:	4b87      	ldr	r3, [pc, #540]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	4983      	ldr	r1, [pc, #524]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c08:	4b7e      	ldr	r3, [pc, #504]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	497b      	ldr	r1, [pc, #492]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c2a:	4b76      	ldr	r3, [pc, #472]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c38:	4972      	ldr	r1, [pc, #456]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c4c:	4b6d      	ldr	r3, [pc, #436]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5a:	496a      	ldr	r1, [pc, #424]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c6e:	4b65      	ldr	r3, [pc, #404]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7c:	4961      	ldr	r1, [pc, #388]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c90:	4b5c      	ldr	r3, [pc, #368]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9e:	4959      	ldr	r1, [pc, #356]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cb2:	4b54      	ldr	r3, [pc, #336]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc0:	4950      	ldr	r1, [pc, #320]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cd4:	4b4b      	ldr	r3, [pc, #300]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	4948      	ldr	r1, [pc, #288]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cf6:	4b43      	ldr	r3, [pc, #268]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	493f      	ldr	r1, [pc, #252]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d028      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d18:	4b3a      	ldr	r3, [pc, #232]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d26:	4937      	ldr	r1, [pc, #220]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d36:	d106      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d38:	4b32      	ldr	r3, [pc, #200]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a31      	ldr	r2, [pc, #196]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d42:	60d3      	str	r3, [r2, #12]
 8003d44:	e011      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d4e:	d10c      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	2101      	movs	r1, #1
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f8d8 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d66:	7cfb      	ldrb	r3, [r7, #19]
 8003d68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d028      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d76:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	491f      	ldr	r1, [pc, #124]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d94:	d106      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d96:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003da0:	60d3      	str	r3, [r2, #12]
 8003da2:	e011      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3304      	adds	r3, #4
 8003db2:	2101      	movs	r1, #1
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 f8a9 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003dc4:	7cfb      	ldrb	r3, [r7, #19]
 8003dc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d02b      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	4908      	ldr	r1, [pc, #32]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003df2:	d109      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4a02      	ldr	r2, [pc, #8]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dfe:	60d3      	str	r3, [r2, #12]
 8003e00:	e014      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3304      	adds	r3, #4
 8003e16:	2101      	movs	r1, #1
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 f877 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e22:	7cfb      	ldrb	r3, [r7, #19]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d02f      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e46:	4928      	ldr	r1, [pc, #160]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e56:	d10d      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f854 	bl	8003f0c <RCCEx_PLLSAI1_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d014      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e6e:	7cfb      	ldrb	r3, [r7, #19]
 8003e70:	74bb      	strb	r3, [r7, #18]
 8003e72:	e011      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3320      	adds	r3, #32
 8003e82:	2102      	movs	r1, #2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 f935 	bl	80040f4 <RCCEx_PLLSAI2_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e8e:	7cfb      	ldrb	r3, [r7, #19]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb2:	490d      	ldr	r1, [pc, #52]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	4904      	ldr	r1, [pc, #16]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ede:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000

08003eec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ef6:	f043 0304 	orr.w	r3, r3, #4
 8003efa:	6013      	str	r3, [r2, #0]
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000

08003f0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f1a:	4b75      	ldr	r3, [pc, #468]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d018      	beq.n	8003f58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f26:	4b72      	ldr	r3, [pc, #456]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f003 0203 	and.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d10d      	bne.n	8003f52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
       ||
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f3e:	4b6c      	ldr	r3, [pc, #432]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d047      	beq.n	8003fe2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	73fb      	strb	r3, [r7, #15]
 8003f56:	e044      	b.n	8003fe2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d018      	beq.n	8003f92 <RCCEx_PLLSAI1_Config+0x86>
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d825      	bhi.n	8003fb0 <RCCEx_PLLSAI1_Config+0xa4>
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d002      	beq.n	8003f6e <RCCEx_PLLSAI1_Config+0x62>
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d009      	beq.n	8003f80 <RCCEx_PLLSAI1_Config+0x74>
 8003f6c:	e020      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f6e:	4b60      	ldr	r3, [pc, #384]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d11d      	bne.n	8003fb6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f7e:	e01a      	b.n	8003fb6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f80:	4b5b      	ldr	r3, [pc, #364]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d116      	bne.n	8003fba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f90:	e013      	b.n	8003fba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f92:	4b57      	ldr	r3, [pc, #348]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f9e:	4b54      	ldr	r3, [pc, #336]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fae:	e006      	b.n	8003fbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb4:	e004      	b.n	8003fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e002      	b.n	8003fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fba:	bf00      	nop
 8003fbc:	e000      	b.n	8003fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10d      	bne.n	8003fe2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fc6:	4b4a      	ldr	r3, [pc, #296]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6819      	ldr	r1, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	4944      	ldr	r1, [pc, #272]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d17d      	bne.n	80040e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fe8:	4b41      	ldr	r3, [pc, #260]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a40      	ldr	r2, [pc, #256]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff4:	f7fd fa4c 	bl	8001490 <HAL_GetTick>
 8003ff8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ffa:	e009      	b.n	8004010 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ffc:	f7fd fa48 	bl	8001490 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d902      	bls.n	8004010 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	73fb      	strb	r3, [r7, #15]
        break;
 800400e:	e005      	b.n	800401c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004010:	4b37      	ldr	r3, [pc, #220]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1ef      	bne.n	8003ffc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d160      	bne.n	80040e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d111      	bne.n	800404c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004028:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6892      	ldr	r2, [r2, #8]
 8004038:	0211      	lsls	r1, r2, #8
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68d2      	ldr	r2, [r2, #12]
 800403e:	0912      	lsrs	r2, r2, #4
 8004040:	0452      	lsls	r2, r2, #17
 8004042:	430a      	orrs	r2, r1
 8004044:	492a      	ldr	r1, [pc, #168]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	610b      	str	r3, [r1, #16]
 800404a:	e027      	b.n	800409c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d112      	bne.n	8004078 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004052:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800405a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6892      	ldr	r2, [r2, #8]
 8004062:	0211      	lsls	r1, r2, #8
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6912      	ldr	r2, [r2, #16]
 8004068:	0852      	lsrs	r2, r2, #1
 800406a:	3a01      	subs	r2, #1
 800406c:	0552      	lsls	r2, r2, #21
 800406e:	430a      	orrs	r2, r1
 8004070:	491f      	ldr	r1, [pc, #124]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	610b      	str	r3, [r1, #16]
 8004076:	e011      	b.n	800409c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004080:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6892      	ldr	r2, [r2, #8]
 8004088:	0211      	lsls	r1, r2, #8
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6952      	ldr	r2, [r2, #20]
 800408e:	0852      	lsrs	r2, r2, #1
 8004090:	3a01      	subs	r2, #1
 8004092:	0652      	lsls	r2, r2, #25
 8004094:	430a      	orrs	r2, r1
 8004096:	4916      	ldr	r1, [pc, #88]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fd f9f2 	bl	8001490 <HAL_GetTick>
 80040ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040ae:	e009      	b.n	80040c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040b0:	f7fd f9ee 	bl	8001490 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d902      	bls.n	80040c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	73fb      	strb	r3, [r7, #15]
          break;
 80040c2:	e005      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ef      	beq.n	80040b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	4904      	ldr	r1, [pc, #16]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000

080040f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004102:	4b6a      	ldr	r3, [pc, #424]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d018      	beq.n	8004140 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800410e:	4b67      	ldr	r3, [pc, #412]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0203 	and.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d10d      	bne.n	800413a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
       ||
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004126:	4b61      	ldr	r3, [pc, #388]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
       ||
 8004136:	429a      	cmp	r2, r3
 8004138:	d047      	beq.n	80041ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
 800413e:	e044      	b.n	80041ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d018      	beq.n	800417a <RCCEx_PLLSAI2_Config+0x86>
 8004148:	2b03      	cmp	r3, #3
 800414a:	d825      	bhi.n	8004198 <RCCEx_PLLSAI2_Config+0xa4>
 800414c:	2b01      	cmp	r3, #1
 800414e:	d002      	beq.n	8004156 <RCCEx_PLLSAI2_Config+0x62>
 8004150:	2b02      	cmp	r3, #2
 8004152:	d009      	beq.n	8004168 <RCCEx_PLLSAI2_Config+0x74>
 8004154:	e020      	b.n	8004198 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004156:	4b55      	ldr	r3, [pc, #340]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11d      	bne.n	800419e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004166:	e01a      	b.n	800419e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004168:	4b50      	ldr	r3, [pc, #320]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004170:	2b00      	cmp	r3, #0
 8004172:	d116      	bne.n	80041a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004178:	e013      	b.n	80041a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800417a:	4b4c      	ldr	r3, [pc, #304]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10f      	bne.n	80041a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004186:	4b49      	ldr	r3, [pc, #292]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004196:	e006      	b.n	80041a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      break;
 800419c:	e004      	b.n	80041a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800419e:	bf00      	nop
 80041a0:	e002      	b.n	80041a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041a2:	bf00      	nop
 80041a4:	e000      	b.n	80041a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10d      	bne.n	80041ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041ae:	4b3f      	ldr	r3, [pc, #252]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6819      	ldr	r1, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	3b01      	subs	r3, #1
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	430b      	orrs	r3, r1
 80041c4:	4939      	ldr	r1, [pc, #228]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d167      	bne.n	80042a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041d0:	4b36      	ldr	r3, [pc, #216]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a35      	ldr	r2, [pc, #212]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041dc:	f7fd f958 	bl	8001490 <HAL_GetTick>
 80041e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041e2:	e009      	b.n	80041f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041e4:	f7fd f954 	bl	8001490 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d902      	bls.n	80041f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	73fb      	strb	r3, [r7, #15]
        break;
 80041f6:	e005      	b.n	8004204 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041f8:	4b2c      	ldr	r3, [pc, #176]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1ef      	bne.n	80041e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d14a      	bne.n	80042a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d111      	bne.n	8004234 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004210:	4b26      	ldr	r3, [pc, #152]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6892      	ldr	r2, [r2, #8]
 8004220:	0211      	lsls	r1, r2, #8
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68d2      	ldr	r2, [r2, #12]
 8004226:	0912      	lsrs	r2, r2, #4
 8004228:	0452      	lsls	r2, r2, #17
 800422a:	430a      	orrs	r2, r1
 800422c:	491f      	ldr	r1, [pc, #124]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	614b      	str	r3, [r1, #20]
 8004232:	e011      	b.n	8004258 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004234:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800423c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6892      	ldr	r2, [r2, #8]
 8004244:	0211      	lsls	r1, r2, #8
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6912      	ldr	r2, [r2, #16]
 800424a:	0852      	lsrs	r2, r2, #1
 800424c:	3a01      	subs	r2, #1
 800424e:	0652      	lsls	r2, r2, #25
 8004250:	430a      	orrs	r2, r1
 8004252:	4916      	ldr	r1, [pc, #88]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004258:	4b14      	ldr	r3, [pc, #80]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a13      	ldr	r2, [pc, #76]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800425e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004262:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7fd f914 	bl	8001490 <HAL_GetTick>
 8004268:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800426a:	e009      	b.n	8004280 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800426c:	f7fd f910 	bl	8001490 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d902      	bls.n	8004280 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	73fb      	strb	r3, [r7, #15]
          break;
 800427e:	e005      	b.n	800428c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ef      	beq.n	800426c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	4904      	ldr	r1, [pc, #16]	; (80042ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800429c:	4313      	orrs	r3, r2
 800429e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000

080042b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e095      	b.n	80043ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d108      	bne.n	80042dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d2:	d009      	beq.n	80042e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	61da      	str	r2, [r3, #28]
 80042da:	e005      	b.n	80042e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fc fe48 	bl	8000f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004328:	d902      	bls.n	8004330 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e002      	b.n	8004336 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004334:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800433e:	d007      	beq.n	8004350 <HAL_SPI_Init+0xa0>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004348:	d002      	beq.n	8004350 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	ea42 0103 	orr.w	r1, r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	0c1b      	lsrs	r3, r3, #16
 80043ac:	f003 0204 	and.w	r2, r3, #4
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80043cc:	ea42 0103 	orr.w	r1, r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e040      	b.n	800448a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fc fe01 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2224      	movs	r2, #36	; 0x24
 8004422:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f8c1 	bl	80045bc <UART_SetConfig>
 800443a:	4603      	mov	r3, r0
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e022      	b.n	800448a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fb6d 	bl	8004b2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004460:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004470:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fbf4 	bl	8004c70 <UART_CheckIdleState>
 8004488:	4603      	mov	r3, r0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b08a      	sub	sp, #40	; 0x28
 8004496:	af02      	add	r7, sp, #8
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	f040 8082 	bne.w	80045b0 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_UART_Transmit+0x26>
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e07a      	b.n	80045b2 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Transmit+0x38>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e073      	b.n	80045b2 <HAL_UART_Transmit+0x120>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2221      	movs	r2, #33	; 0x21
 80044de:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044e0:	f7fc ffd6 	bl	8001490 <HAL_GetTick>
 80044e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	88fa      	ldrh	r2, [r7, #6]
 80044ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	88fa      	ldrh	r2, [r7, #6]
 80044f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fe:	d108      	bne.n	8004512 <HAL_UART_Transmit+0x80>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d104      	bne.n	8004512 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e003      	b.n	800451a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004522:	e02d      	b.n	8004580 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2200      	movs	r2, #0
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fbe7 	bl	8004d02 <UART_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e039      	b.n	80045b2 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	881a      	ldrh	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004550:	b292      	uxth	r2, r2
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	3302      	adds	r3, #2
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e008      	b.n	800456e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	781a      	ldrb	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b292      	uxth	r2, r2
 8004566:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	3301      	adds	r3, #1
 800456c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1cb      	bne.n	8004524 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2200      	movs	r2, #0
 8004594:	2140      	movs	r1, #64	; 0x40
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fbb3 	bl	8004d02 <UART_WaitOnFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e005      	b.n	80045b2 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e000      	b.n	80045b2 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c0:	b08a      	sub	sp, #40	; 0x28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	431a      	orrs	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4ba4      	ldr	r3, [pc, #656]	; (800487c <UART_SetConfig+0x2c0>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045f4:	430b      	orrs	r3, r1
 80045f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a99      	ldr	r2, [pc, #612]	; (8004880 <UART_SetConfig+0x2c4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004624:	4313      	orrs	r3, r2
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004638:	430a      	orrs	r2, r1
 800463a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a90      	ldr	r2, [pc, #576]	; (8004884 <UART_SetConfig+0x2c8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d126      	bne.n	8004694 <UART_SetConfig+0xd8>
 8004646:	4b90      	ldr	r3, [pc, #576]	; (8004888 <UART_SetConfig+0x2cc>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	2b03      	cmp	r3, #3
 8004652:	d81b      	bhi.n	800468c <UART_SetConfig+0xd0>
 8004654:	a201      	add	r2, pc, #4	; (adr r2, 800465c <UART_SetConfig+0xa0>)
 8004656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465a:	bf00      	nop
 800465c:	0800466d 	.word	0x0800466d
 8004660:	0800467d 	.word	0x0800467d
 8004664:	08004675 	.word	0x08004675
 8004668:	08004685 	.word	0x08004685
 800466c:	2301      	movs	r3, #1
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e116      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004674:	2302      	movs	r3, #2
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467a:	e112      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800467c:	2304      	movs	r3, #4
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004682:	e10e      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004684:	2308      	movs	r3, #8
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468a:	e10a      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800468c:	2310      	movs	r3, #16
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004692:	e106      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a7c      	ldr	r2, [pc, #496]	; (800488c <UART_SetConfig+0x2d0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d138      	bne.n	8004710 <UART_SetConfig+0x154>
 800469e:	4b7a      	ldr	r3, [pc, #488]	; (8004888 <UART_SetConfig+0x2cc>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b0c      	cmp	r3, #12
 80046aa:	d82d      	bhi.n	8004708 <UART_SetConfig+0x14c>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0xf8>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046e9 	.word	0x080046e9
 80046b8:	08004709 	.word	0x08004709
 80046bc:	08004709 	.word	0x08004709
 80046c0:	08004709 	.word	0x08004709
 80046c4:	080046f9 	.word	0x080046f9
 80046c8:	08004709 	.word	0x08004709
 80046cc:	08004709 	.word	0x08004709
 80046d0:	08004709 	.word	0x08004709
 80046d4:	080046f1 	.word	0x080046f1
 80046d8:	08004709 	.word	0x08004709
 80046dc:	08004709 	.word	0x08004709
 80046e0:	08004709 	.word	0x08004709
 80046e4:	08004701 	.word	0x08004701
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ee:	e0d8      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80046f0:	2302      	movs	r3, #2
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f6:	e0d4      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80046f8:	2304      	movs	r3, #4
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fe:	e0d0      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004700:	2308      	movs	r3, #8
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e0cc      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004708:	2310      	movs	r3, #16
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e0c8      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a5e      	ldr	r2, [pc, #376]	; (8004890 <UART_SetConfig+0x2d4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d125      	bne.n	8004766 <UART_SetConfig+0x1aa>
 800471a:	4b5b      	ldr	r3, [pc, #364]	; (8004888 <UART_SetConfig+0x2cc>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004720:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004724:	2b30      	cmp	r3, #48	; 0x30
 8004726:	d016      	beq.n	8004756 <UART_SetConfig+0x19a>
 8004728:	2b30      	cmp	r3, #48	; 0x30
 800472a:	d818      	bhi.n	800475e <UART_SetConfig+0x1a2>
 800472c:	2b20      	cmp	r3, #32
 800472e:	d00a      	beq.n	8004746 <UART_SetConfig+0x18a>
 8004730:	2b20      	cmp	r3, #32
 8004732:	d814      	bhi.n	800475e <UART_SetConfig+0x1a2>
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <UART_SetConfig+0x182>
 8004738:	2b10      	cmp	r3, #16
 800473a:	d008      	beq.n	800474e <UART_SetConfig+0x192>
 800473c:	e00f      	b.n	800475e <UART_SetConfig+0x1a2>
 800473e:	2300      	movs	r3, #0
 8004740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004744:	e0ad      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004746:	2302      	movs	r3, #2
 8004748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474c:	e0a9      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800474e:	2304      	movs	r3, #4
 8004750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004754:	e0a5      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004756:	2308      	movs	r3, #8
 8004758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475c:	e0a1      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800475e:	2310      	movs	r3, #16
 8004760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004764:	e09d      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a4a      	ldr	r2, [pc, #296]	; (8004894 <UART_SetConfig+0x2d8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d125      	bne.n	80047bc <UART_SetConfig+0x200>
 8004770:	4b45      	ldr	r3, [pc, #276]	; (8004888 <UART_SetConfig+0x2cc>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800477a:	2bc0      	cmp	r3, #192	; 0xc0
 800477c:	d016      	beq.n	80047ac <UART_SetConfig+0x1f0>
 800477e:	2bc0      	cmp	r3, #192	; 0xc0
 8004780:	d818      	bhi.n	80047b4 <UART_SetConfig+0x1f8>
 8004782:	2b80      	cmp	r3, #128	; 0x80
 8004784:	d00a      	beq.n	800479c <UART_SetConfig+0x1e0>
 8004786:	2b80      	cmp	r3, #128	; 0x80
 8004788:	d814      	bhi.n	80047b4 <UART_SetConfig+0x1f8>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <UART_SetConfig+0x1d8>
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	d008      	beq.n	80047a4 <UART_SetConfig+0x1e8>
 8004792:	e00f      	b.n	80047b4 <UART_SetConfig+0x1f8>
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e082      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800479c:	2302      	movs	r3, #2
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e07e      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80047a4:	2304      	movs	r3, #4
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047aa:	e07a      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80047ac:	2308      	movs	r3, #8
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b2:	e076      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80047b4:	2310      	movs	r3, #16
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ba:	e072      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a35      	ldr	r2, [pc, #212]	; (8004898 <UART_SetConfig+0x2dc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d12a      	bne.n	800481c <UART_SetConfig+0x260>
 80047c6:	4b30      	ldr	r3, [pc, #192]	; (8004888 <UART_SetConfig+0x2cc>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047d4:	d01a      	beq.n	800480c <UART_SetConfig+0x250>
 80047d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047da:	d81b      	bhi.n	8004814 <UART_SetConfig+0x258>
 80047dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e0:	d00c      	beq.n	80047fc <UART_SetConfig+0x240>
 80047e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e6:	d815      	bhi.n	8004814 <UART_SetConfig+0x258>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <UART_SetConfig+0x238>
 80047ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f0:	d008      	beq.n	8004804 <UART_SetConfig+0x248>
 80047f2:	e00f      	b.n	8004814 <UART_SetConfig+0x258>
 80047f4:	2300      	movs	r3, #0
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fa:	e052      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80047fc:	2302      	movs	r3, #2
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004802:	e04e      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004804:	2304      	movs	r3, #4
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480a:	e04a      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800480c:	2308      	movs	r3, #8
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004812:	e046      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004814:	2310      	movs	r3, #16
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481a:	e042      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a17      	ldr	r2, [pc, #92]	; (8004880 <UART_SetConfig+0x2c4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d13a      	bne.n	800489c <UART_SetConfig+0x2e0>
 8004826:	4b18      	ldr	r3, [pc, #96]	; (8004888 <UART_SetConfig+0x2cc>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004830:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004834:	d01a      	beq.n	800486c <UART_SetConfig+0x2b0>
 8004836:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800483a:	d81b      	bhi.n	8004874 <UART_SetConfig+0x2b8>
 800483c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004840:	d00c      	beq.n	800485c <UART_SetConfig+0x2a0>
 8004842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004846:	d815      	bhi.n	8004874 <UART_SetConfig+0x2b8>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <UART_SetConfig+0x298>
 800484c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004850:	d008      	beq.n	8004864 <UART_SetConfig+0x2a8>
 8004852:	e00f      	b.n	8004874 <UART_SetConfig+0x2b8>
 8004854:	2300      	movs	r3, #0
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485a:	e022      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800485c:	2302      	movs	r3, #2
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004862:	e01e      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004864:	2304      	movs	r3, #4
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486a:	e01a      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800486c:	2308      	movs	r3, #8
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004872:	e016      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004874:	2310      	movs	r3, #16
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487a:	e012      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800487c:	efff69f3 	.word	0xefff69f3
 8004880:	40008000 	.word	0x40008000
 8004884:	40013800 	.word	0x40013800
 8004888:	40021000 	.word	0x40021000
 800488c:	40004400 	.word	0x40004400
 8004890:	40004800 	.word	0x40004800
 8004894:	40004c00 	.word	0x40004c00
 8004898:	40005000 	.word	0x40005000
 800489c:	2310      	movs	r3, #16
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a9f      	ldr	r2, [pc, #636]	; (8004b24 <UART_SetConfig+0x568>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d17a      	bne.n	80049a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d824      	bhi.n	80048fe <UART_SetConfig+0x342>
 80048b4:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <UART_SetConfig+0x300>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048e1 	.word	0x080048e1
 80048c0:	080048ff 	.word	0x080048ff
 80048c4:	080048e9 	.word	0x080048e9
 80048c8:	080048ff 	.word	0x080048ff
 80048cc:	080048ef 	.word	0x080048ef
 80048d0:	080048ff 	.word	0x080048ff
 80048d4:	080048ff 	.word	0x080048ff
 80048d8:	080048ff 	.word	0x080048ff
 80048dc:	080048f7 	.word	0x080048f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e0:	f7fe ff8e 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 80048e4:	61f8      	str	r0, [r7, #28]
        break;
 80048e6:	e010      	b.n	800490a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e8:	4b8f      	ldr	r3, [pc, #572]	; (8004b28 <UART_SetConfig+0x56c>)
 80048ea:	61fb      	str	r3, [r7, #28]
        break;
 80048ec:	e00d      	b.n	800490a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ee:	f7fe feef 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 80048f2:	61f8      	str	r0, [r7, #28]
        break;
 80048f4:	e009      	b.n	800490a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fa:	61fb      	str	r3, [r7, #28]
        break;
 80048fc:	e005      	b.n	800490a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004908:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80fb 	beq.w	8004b08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4413      	add	r3, r2
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	429a      	cmp	r2, r3
 8004920:	d305      	bcc.n	800492e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	429a      	cmp	r2, r3
 800492c:	d903      	bls.n	8004936 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004934:	e0e8      	b.n	8004b08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2200      	movs	r2, #0
 800493a:	461c      	mov	r4, r3
 800493c:	4615      	mov	r5, r2
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	022b      	lsls	r3, r5, #8
 8004948:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800494c:	0222      	lsls	r2, r4, #8
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	6849      	ldr	r1, [r1, #4]
 8004952:	0849      	lsrs	r1, r1, #1
 8004954:	2000      	movs	r0, #0
 8004956:	4688      	mov	r8, r1
 8004958:	4681      	mov	r9, r0
 800495a:	eb12 0a08 	adds.w	sl, r2, r8
 800495e:	eb43 0b09 	adc.w	fp, r3, r9
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004970:	4650      	mov	r0, sl
 8004972:	4659      	mov	r1, fp
 8004974:	f7fb fc28 	bl	80001c8 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004986:	d308      	bcc.n	800499a <UART_SetConfig+0x3de>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800498e:	d204      	bcs.n	800499a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	60da      	str	r2, [r3, #12]
 8004998:	e0b6      	b.n	8004b08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049a0:	e0b2      	b.n	8004b08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049aa:	d15e      	bne.n	8004a6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d828      	bhi.n	8004a06 <UART_SetConfig+0x44a>
 80049b4:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <UART_SetConfig+0x400>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	080049f1 	.word	0x080049f1
 80049c8:	08004a07 	.word	0x08004a07
 80049cc:	080049f7 	.word	0x080049f7
 80049d0:	08004a07 	.word	0x08004a07
 80049d4:	08004a07 	.word	0x08004a07
 80049d8:	08004a07 	.word	0x08004a07
 80049dc:	080049ff 	.word	0x080049ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e0:	f7fe ff0e 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 80049e4:	61f8      	str	r0, [r7, #28]
        break;
 80049e6:	e014      	b.n	8004a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e8:	f7fe ff20 	bl	800382c <HAL_RCC_GetPCLK2Freq>
 80049ec:	61f8      	str	r0, [r7, #28]
        break;
 80049ee:	e010      	b.n	8004a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f0:	4b4d      	ldr	r3, [pc, #308]	; (8004b28 <UART_SetConfig+0x56c>)
 80049f2:	61fb      	str	r3, [r7, #28]
        break;
 80049f4:	e00d      	b.n	8004a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f6:	f7fe fe6b 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 80049fa:	61f8      	str	r0, [r7, #28]
        break;
 80049fc:	e009      	b.n	8004a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a02:	61fb      	str	r3, [r7, #28]
        break;
 8004a04:	e005      	b.n	8004a12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d077      	beq.n	8004b08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	005a      	lsls	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	441a      	add	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b0f      	cmp	r3, #15
 8004a32:	d916      	bls.n	8004a62 <UART_SetConfig+0x4a6>
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3a:	d212      	bcs.n	8004a62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f023 030f 	bic.w	r3, r3, #15
 8004a44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	8afb      	ldrh	r3, [r7, #22]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	8afa      	ldrh	r2, [r7, #22]
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	e052      	b.n	8004b08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a68:	e04e      	b.n	8004b08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d827      	bhi.n	8004ac2 <UART_SetConfig+0x506>
 8004a72:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <UART_SetConfig+0x4bc>)
 8004a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a78:	08004a9d 	.word	0x08004a9d
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004aad 	.word	0x08004aad
 8004a84:	08004ac3 	.word	0x08004ac3
 8004a88:	08004ab3 	.word	0x08004ab3
 8004a8c:	08004ac3 	.word	0x08004ac3
 8004a90:	08004ac3 	.word	0x08004ac3
 8004a94:	08004ac3 	.word	0x08004ac3
 8004a98:	08004abb 	.word	0x08004abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a9c:	f7fe feb0 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 8004aa0:	61f8      	str	r0, [r7, #28]
        break;
 8004aa2:	e014      	b.n	8004ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa4:	f7fe fec2 	bl	800382c <HAL_RCC_GetPCLK2Freq>
 8004aa8:	61f8      	str	r0, [r7, #28]
        break;
 8004aaa:	e010      	b.n	8004ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aac:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <UART_SetConfig+0x56c>)
 8004aae:	61fb      	str	r3, [r7, #28]
        break;
 8004ab0:	e00d      	b.n	8004ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab2:	f7fe fe0d 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 8004ab6:	61f8      	str	r0, [r7, #28]
        break;
 8004ab8:	e009      	b.n	8004ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004abe:	61fb      	str	r3, [r7, #28]
        break;
 8004ac0:	e005      	b.n	8004ace <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004acc:	bf00      	nop
    }

    if (pclk != 0U)
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d019      	beq.n	8004b08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	085a      	lsrs	r2, r3, #1
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	441a      	add	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b0f      	cmp	r3, #15
 8004aec:	d909      	bls.n	8004b02 <UART_SetConfig+0x546>
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af4:	d205      	bcs.n	8004b02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60da      	str	r2, [r3, #12]
 8004b00:	e002      	b.n	8004b08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3728      	adds	r7, #40	; 0x28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b22:	bf00      	nop
 8004b24:	40008000 	.word	0x40008000
 8004b28:	00f42400 	.word	0x00f42400

08004b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01a      	beq.n	8004c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2a:	d10a      	bne.n	8004c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	605a      	str	r2, [r3, #4]
  }
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c80:	f7fc fc06 	bl	8001490 <HAL_GetTick>
 8004c84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d10e      	bne.n	8004cb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f82d 	bl	8004d02 <UART_WaitOnFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e023      	b.n	8004cfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d10e      	bne.n	8004cde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f817 	bl	8004d02 <UART_WaitOnFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e00d      	b.n	8004cfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b09c      	sub	sp, #112	; 0x70
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d12:	e0a5      	b.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	f000 80a1 	beq.w	8004e60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1e:	f7fc fbb7 	bl	8001490 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d302      	bcc.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d13e      	bne.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d48:	667b      	str	r3, [r7, #100]	; 0x64
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e6      	bne.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3308      	adds	r3, #8
 8004d84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d86:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e5      	bne.n	8004d66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e067      	b.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d04f      	beq.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dce:	d147      	bne.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dd8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	461a      	mov	r2, r3
 8004df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e6      	bne.n	8004dda <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3308      	adds	r3, #8
 8004e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3308      	adds	r3, #8
 8004e2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e2c:	623a      	str	r2, [r7, #32]
 8004e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	69f9      	ldr	r1, [r7, #28]
 8004e32:	6a3a      	ldr	r2, [r7, #32]
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e5      	bne.n	8004e0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e010      	b.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69da      	ldr	r2, [r3, #28]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	79fb      	ldrb	r3, [r7, #7]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	f43f af4a 	beq.w	8004d14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3770      	adds	r7, #112	; 0x70
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	f107 001c 	add.w	r0, r7, #28
 8004e98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fa6f 	bl	800538c <USB_CoreReset>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ec4:	e005      	b.n	8004ed2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ede:	b004      	add	sp, #16
 8004ee0:	4770      	bx	lr

08004ee2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f023 0201 	bic.w	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d115      	bne.n	8004f52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f32:	2001      	movs	r0, #1
 8004f34:	f7fc fab8 	bl	80014a8 <HAL_Delay>
      ms++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fa16 	bl	8005370 <USB_GetMode>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d01e      	beq.n	8004f88 <USB_SetCurrentMode+0x84>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b31      	cmp	r3, #49	; 0x31
 8004f4e:	d9f0      	bls.n	8004f32 <USB_SetCurrentMode+0x2e>
 8004f50:	e01a      	b.n	8004f88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d115      	bne.n	8004f84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f64:	2001      	movs	r0, #1
 8004f66:	f7fc fa9f 	bl	80014a8 <HAL_Delay>
      ms++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f9fd 	bl	8005370 <USB_GetMode>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <USB_SetCurrentMode+0x84>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b31      	cmp	r3, #49	; 0x31
 8004f80:	d9f0      	bls.n	8004f64 <USB_SetCurrentMode+0x60>
 8004f82:	e001      	b.n	8004f88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e005      	b.n	8004f94 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b32      	cmp	r3, #50	; 0x32
 8004f8c:	d101      	bne.n	8004f92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b086      	sub	sp, #24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	e009      	b.n	8004fd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3340      	adds	r3, #64	; 0x40
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b0e      	cmp	r3, #14
 8004fd4:	d9f2      	bls.n	8004fbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d11c      	bne.n	8005016 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fea:	f043 0302 	orr.w	r3, r3, #2
 8004fee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e005      	b.n	8005022 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005028:	461a      	mov	r2, r3
 800502a:	2300      	movs	r3, #0
 800502c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005034:	4619      	mov	r1, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503c:	461a      	mov	r2, r3
 800503e:	680b      	ldr	r3, [r1, #0]
 8005040:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005042:	2103      	movs	r1, #3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f959 	bl	80052fc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800504a:	2110      	movs	r1, #16
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f8f1 	bl	8005234 <USB_FlushTxFifo>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f91d 	bl	800529c <USB_FlushRxFifo>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005072:	461a      	mov	r2, r3
 8005074:	2300      	movs	r3, #0
 8005076:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507e:	461a      	mov	r2, r3
 8005080:	2300      	movs	r3, #0
 8005082:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508a:	461a      	mov	r2, r3
 800508c:	2300      	movs	r3, #0
 800508e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005090:	2300      	movs	r3, #0
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	e043      	b.n	800511e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ac:	d118      	bne.n	80050e0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c0:	461a      	mov	r2, r3
 80050c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e013      	b.n	80050f2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d6:	461a      	mov	r2, r3
 80050d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e008      	b.n	80050f2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	461a      	mov	r2, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fe:	461a      	mov	r2, r3
 8005100:	2300      	movs	r3, #0
 8005102:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	461a      	mov	r2, r3
 8005112:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005116:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	3301      	adds	r3, #1
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	429a      	cmp	r2, r3
 8005124:	d3b7      	bcc.n	8005096 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	e043      	b.n	80051b4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800513e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005142:	d118      	bne.n	8005176 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005156:	461a      	mov	r2, r3
 8005158:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e013      	b.n	8005188 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	461a      	mov	r2, r3
 800516e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e008      	b.n	8005188 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	461a      	mov	r2, r3
 8005184:	2300      	movs	r3, #0
 8005186:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	461a      	mov	r2, r3
 8005196:	2300      	movs	r3, #0
 8005198:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	461a      	mov	r2, r3
 80051a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	3301      	adds	r3, #1
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d3b7      	bcc.n	800512c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f043 0210 	orr.w	r2, r3, #16
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	4b10      	ldr	r3, [pc, #64]	; (8005230 <USB_DevInit+0x294>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f043 0208 	orr.w	r2, r3, #8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520a:	2b01      	cmp	r3, #1
 800520c:	d107      	bne.n	800521e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005216:	f043 0304 	orr.w	r3, r3, #4
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800521e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800522a:	b004      	add	sp, #16
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	803c3800 	.word	0x803c3800

08005234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4a13      	ldr	r2, [pc, #76]	; (8005298 <USB_FlushTxFifo+0x64>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d901      	bls.n	8005254 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e01b      	b.n	800528c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	daf2      	bge.n	8005242 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	019b      	lsls	r3, r3, #6
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3301      	adds	r3, #1
 8005270:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4a08      	ldr	r2, [pc, #32]	; (8005298 <USB_FlushTxFifo+0x64>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e006      	b.n	800528c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b20      	cmp	r3, #32
 8005288:	d0f0      	beq.n	800526c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	00030d40 	.word	0x00030d40

0800529c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3301      	adds	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4a11      	ldr	r2, [pc, #68]	; (80052f8 <USB_FlushRxFifo+0x5c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e018      	b.n	80052ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	daf2      	bge.n	80052a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2210      	movs	r2, #16
 80052ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3301      	adds	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <USB_FlushRxFifo+0x5c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e006      	b.n	80052ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d0f0      	beq.n	80052cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	00030d40 	.word	0x00030d40

080052fc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800531c:	4313      	orrs	r3, r2
 800531e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005348:	f023 0303 	bic.w	r3, r3, #3
 800534c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535c:	f043 0302 	orr.w	r3, r3, #2
 8005360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	f003 0301 	and.w	r3, r3, #1
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3301      	adds	r3, #1
 800539c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <USB_CoreReset+0x64>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e01b      	b.n	80053e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	daf2      	bge.n	8005398 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f043 0201 	orr.w	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3301      	adds	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4a09      	ldr	r2, [pc, #36]	; (80053f0 <USB_CoreReset+0x64>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d901      	bls.n	80053d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e006      	b.n	80053e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d0f0      	beq.n	80053c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	00030d40 	.word	0x00030d40

080053f4 <__libc_init_array>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	4d0d      	ldr	r5, [pc, #52]	; (800542c <__libc_init_array+0x38>)
 80053f8:	4c0d      	ldr	r4, [pc, #52]	; (8005430 <__libc_init_array+0x3c>)
 80053fa:	1b64      	subs	r4, r4, r5
 80053fc:	10a4      	asrs	r4, r4, #2
 80053fe:	2600      	movs	r6, #0
 8005400:	42a6      	cmp	r6, r4
 8005402:	d109      	bne.n	8005418 <__libc_init_array+0x24>
 8005404:	4d0b      	ldr	r5, [pc, #44]	; (8005434 <__libc_init_array+0x40>)
 8005406:	4c0c      	ldr	r4, [pc, #48]	; (8005438 <__libc_init_array+0x44>)
 8005408:	f000 f820 	bl	800544c <_init>
 800540c:	1b64      	subs	r4, r4, r5
 800540e:	10a4      	asrs	r4, r4, #2
 8005410:	2600      	movs	r6, #0
 8005412:	42a6      	cmp	r6, r4
 8005414:	d105      	bne.n	8005422 <__libc_init_array+0x2e>
 8005416:	bd70      	pop	{r4, r5, r6, pc}
 8005418:	f855 3b04 	ldr.w	r3, [r5], #4
 800541c:	4798      	blx	r3
 800541e:	3601      	adds	r6, #1
 8005420:	e7ee      	b.n	8005400 <__libc_init_array+0xc>
 8005422:	f855 3b04 	ldr.w	r3, [r5], #4
 8005426:	4798      	blx	r3
 8005428:	3601      	adds	r6, #1
 800542a:	e7f2      	b.n	8005412 <__libc_init_array+0x1e>
 800542c:	080054b8 	.word	0x080054b8
 8005430:	080054b8 	.word	0x080054b8
 8005434:	080054b8 	.word	0x080054b8
 8005438:	080054bc 	.word	0x080054bc

0800543c <memset>:
 800543c:	4402      	add	r2, r0
 800543e:	4603      	mov	r3, r0
 8005440:	4293      	cmp	r3, r2
 8005442:	d100      	bne.n	8005446 <memset+0xa>
 8005444:	4770      	bx	lr
 8005446:	f803 1b01 	strb.w	r1, [r3], #1
 800544a:	e7f9      	b.n	8005440 <memset+0x4>

0800544c <_init>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	bf00      	nop
 8005450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005452:	bc08      	pop	{r3}
 8005454:	469e      	mov	lr, r3
 8005456:	4770      	bx	lr

08005458 <_fini>:
 8005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545a:	bf00      	nop
 800545c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545e:	bc08      	pop	{r3}
 8005460:	469e      	mov	lr, r3
 8005462:	4770      	bx	lr
